{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Enclave Documentation","title":"Home"},{"location":"#enclave-documentation","text":"","title":"Enclave Documentation"},{"location":"community-support/","text":"Community Support Slack We're building a community space for Engineers, Developers, Architects, Security Professionals, DevOps Practitioners and Hobbyists using Enclave to ask questions, get help from the team and interact with each other. Come and join us! Join our Community Slack Developer Forum An alternative to our Slack community. Ask questions, get answers and talk about anything relating to Enclave. Create an account. Start a new discussion, or reply to an existing one. Visit the Enclave Developer Community Forum Platform Status All Systems Operational? Our home for real-time and historical data on platform performance, outages and incidents. Check the Enclave Platform Status Page","title":"Community support"},{"location":"community-support/#community-support","text":"","title":"Community Support"},{"location":"community-support/#slack","text":"We're building a community space for Engineers, Developers, Architects, Security Professionals, DevOps Practitioners and Hobbyists using Enclave to ask questions, get help from the team and interact with each other. Come and join us! Join our Community Slack","title":"Slack"},{"location":"community-support/#developer-forum","text":"An alternative to our Slack community. Ask questions, get answers and talk about anything relating to Enclave. Create an account. Start a new discussion, or reply to an existing one. Visit the Enclave Developer Community Forum","title":"Developer Forum"},{"location":"community-support/#platform-status","text":"All Systems Operational? Our home for real-time and historical data on platform performance, outages and incidents. Check the Enclave Platform Status Page","title":"Platform Status"},{"location":"community/","text":"","title":"Community"},{"location":"glossary/","text":"","title":"Glossary"},{"location":"welcome/","text":"Enclave Documentation Use Enclave to seamlessly connect your devices, systems, virtual machines and containers together on any infrastructure with secure private networks that just work . Tutorials Community support Using our API If you're new to Enclave, check out our getting started guide to help get you up and running in minutes. Get Started \u2192 Stay in touch We send our regular newsletters with product updates, blog posts, and company news. Sign up below to subscribe. Subscribe to our mailing list","title":"Welcome"},{"location":"welcome/#enclave-documentation","text":"Use Enclave to seamlessly connect your devices, systems, virtual machines and containers together on any infrastructure with secure private networks that just work . Tutorials Community support Using our API If you're new to Enclave, check out our getting started guide to help get you up and running in minutes. Get Started \u2192","title":"Enclave Documentation"},{"location":"welcome/#stay-in-touch","text":"We send our regular newsletters with product updates, blog posts, and company news. Sign up below to subscribe. Subscribe to our mailing list","title":"Stay in touch"},{"location":"api/","text":"Using our API The Enclave REST API lets you automate your network; anything you can do via the Enclave Portal , you can also do via our APIs. All APIs are accessed over HTTPS at https://api.enclave.io , and generally follow 'standard' REST patterns. We use the following HTTP Methods: Method Usage GET Retrieve existing data. GET calls are idempotent (no data is ever modified by a GET request). POST Create a new entity in your organisation. In most cases, returns the created entity. PATCH Modify an existing entity in your organisation. Returns the entity after any modifications. PUT Mutate the state of one or more entities (e.g. enable, disable) DELETE Remove one or more entities from your organisation Swagger/OpenAPI We provide a complete Swagger/OpenAPI definition file at https://api.enclave.io/swagger/v1/swagger.json ; you can use your favourite OpenAPI code generator (such as swagger-codegen ) to create a client in your preferred language. The root URL of our API server ( https://api.enclave.io/ ) hosts a basic Swagger UI that you can use to view all our endpoints, and test them out. Authentication There are almost no 'public' APIs in Enclave's REST API; in most cases, you will need to authenticate with our APIs. Authentication is achieved through the use of a Personal Access Token , that is passed as a standard oauth Authorisation: Bearer token in the header. You can create access tokens in your account page in the portal . These tokens are 63-character alpha-numeric strings, and are secrets that should be protected in the same way as other network secrets you possess. Created tokens have access to all of the Enclave organisations that your account has access to in the portal. As an example, you can use curl to authenticate (and get the list of organisations you have access to): $ curl --oauth2-bearer <token> https://api.enclave.io/account/orgs { \"orgs\" : [ { \"orgId\" : \"xxxxxxxxxx\" , \"orgName\" : \"Demo Organisation\" , \"role\" : \"Owner\" } ] } In subsequent examples we're going to use $token in place of a full token. On linux, you can create this variable in your terminal: $ token=<token> Organisation ID Most of the operations you will want to perform against the Enclave API will happen in the context of an organisation . All the entities you can manipulate via the API are attached to an organisation, so you will need to pass an Organisation ID to these APIs. The ID of your organisation can be found in the settings page , but can also be found in the portal URL (e.g. https://portal.enclave.io/org/<orgId>/systems ). Organisation IDs are not secret, and can freely be shared. Only users with access to that organisation will be able to invoke APIs against it. Here's an example of getting the list of systems in your organisation: $ curl --oauth2-bearer $token https://api.enclave.io/org/<orgId>/systems { \"metadata\" : { \"total\" : 1 , \"firstPage\" : 0 , \"prevPage\" : null, \"lastPage\" : 0 , \"nextPage\" : null } , \"links\" : { \"first\" : \"https://api.enclave.io/org/<orgId>/systems\" , \"prev\" : null, \"next\" : null, \"last\" : \"https://api.enclave.io/org/<orgId>/systems\" } , \"items\" : [ { \"systemId\" : \"ABC\" , \"description\" : \"John's Laptop\" , \"state\" : \"Connected\" , \"customDns\" : [] , \"lastSeen\" : \"2021-03-31T11:31:44.3846701Z\" , \"enrolledAt\" : \"2021-03-31T10:55:41.291Z\" , \"enrolmentKeyId\" : 1 , \"enrolmentKeyDescription\" : \"Workstations\" , \"isEnabled\" : true, \"connectedFrom\" : \"X.X.X.X\" , \"hostname\" : \"JOHN-LAPTOP\" , \"platformType\" : \"Windows\" , \"osVersion\" : \"Microsoft Windows 10 Pro (10.0.19041)\" , \"enclaveVersion\" : \"2021.3.24.0\" , \"tags\" : [ { \"tag\" : \"quickstart\" } ] } ] } In subsequent examples, we'll refer to our organisation ID with $orgId , much as we did with $token . Parameters For GET requests, all additional parameters not already specified in the URL can be passed as query string parameters: $ curl --oauth2-bearer $token https://api.enclave.io/org/ $orgId /systems?search = Jane In this example, we're adding the additional search parameter to filter the retrieved list is passed in the query string. For POST , PATCH , PUT and DELETE requests, parameters not included in the URL should be provided as JSON in the request body, with a Content-Type of application/json . $ curl --oauth2-bearer $token \\ -H 'Content-Type: application/json' \\ -d '{\"description\": \"My New Key\"}' \\ https://api.enclave.io/org/ $orgId /enrolment-keys The above example creates a new Enrolment Key called \"My New Key\", and returns the created key. Timestamps All date/time values returned from our API are formatted in ISO8601 format (e.g. 2021-03-31T11:31:44.3846701Z ), and always in the UTC timezone. User-Agent Header All requests to the Enclave API must provide a User-Agent header (your requests will fail without one). We ask that you specify a User-Agent describing your application, to help identify it. Here's an example with curl: $ curl -A \"my-app-integration\" --oauth2-bearer $token https://api.enclave.io/org/ $orgId /systems?search = Jane API Errors Errors from the API are returned using the standard Problem Details format ( RFC 7807 ). We try to make the information returned in these errors as useful as possible: $ curl --oauth2-bearer $token -i https://api.enclave.io/org/ $orgId /systems/NOTASYSTEM HTTP/2 404 server: nginx date: Thu, 01 Apr 2021 14 :50:15 GMT content-type: application/problem+json ; charset = utf-8 cache-control: no-cache, no-store, must-revalidate pragma: no-cache expires: 0 { \"type\" : \"https://api.enclave.io/problems/type/system-not-found\" , \"title\" : \"System cannot be found\" , \"status\" : 404 , \"detail\" : \"System with Enclave identity NOTASYSTEM does not exist, or your access rights do not allow access to it.\" , \"instance\" : \"https://api.enclave.io/problems/instance/7a206c0eb9208c4caab0975333ce47eb\" , \"traceId\" : \"00-7a206c0eb9208c4caab0975333ce47eb-3aa520cfe7bed641-00\" } Most error responses include a traceId value. You can include this value in support discussions to help us narrow down your problem.","title":"Overview"},{"location":"api/#using-our-api","text":"The Enclave REST API lets you automate your network; anything you can do via the Enclave Portal , you can also do via our APIs. All APIs are accessed over HTTPS at https://api.enclave.io , and generally follow 'standard' REST patterns. We use the following HTTP Methods: Method Usage GET Retrieve existing data. GET calls are idempotent (no data is ever modified by a GET request). POST Create a new entity in your organisation. In most cases, returns the created entity. PATCH Modify an existing entity in your organisation. Returns the entity after any modifications. PUT Mutate the state of one or more entities (e.g. enable, disable) DELETE Remove one or more entities from your organisation","title":"Using our API"},{"location":"api/#swaggeropenapi","text":"We provide a complete Swagger/OpenAPI definition file at https://api.enclave.io/swagger/v1/swagger.json ; you can use your favourite OpenAPI code generator (such as swagger-codegen ) to create a client in your preferred language. The root URL of our API server ( https://api.enclave.io/ ) hosts a basic Swagger UI that you can use to view all our endpoints, and test them out.","title":"Swagger/OpenAPI"},{"location":"api/#authentication","text":"There are almost no 'public' APIs in Enclave's REST API; in most cases, you will need to authenticate with our APIs. Authentication is achieved through the use of a Personal Access Token , that is passed as a standard oauth Authorisation: Bearer token in the header. You can create access tokens in your account page in the portal . These tokens are 63-character alpha-numeric strings, and are secrets that should be protected in the same way as other network secrets you possess. Created tokens have access to all of the Enclave organisations that your account has access to in the portal. As an example, you can use curl to authenticate (and get the list of organisations you have access to): $ curl --oauth2-bearer <token> https://api.enclave.io/account/orgs { \"orgs\" : [ { \"orgId\" : \"xxxxxxxxxx\" , \"orgName\" : \"Demo Organisation\" , \"role\" : \"Owner\" } ] } In subsequent examples we're going to use $token in place of a full token. On linux, you can create this variable in your terminal: $ token=<token>","title":"Authentication"},{"location":"api/#organisation-id","text":"Most of the operations you will want to perform against the Enclave API will happen in the context of an organisation . All the entities you can manipulate via the API are attached to an organisation, so you will need to pass an Organisation ID to these APIs. The ID of your organisation can be found in the settings page , but can also be found in the portal URL (e.g. https://portal.enclave.io/org/<orgId>/systems ). Organisation IDs are not secret, and can freely be shared. Only users with access to that organisation will be able to invoke APIs against it. Here's an example of getting the list of systems in your organisation: $ curl --oauth2-bearer $token https://api.enclave.io/org/<orgId>/systems { \"metadata\" : { \"total\" : 1 , \"firstPage\" : 0 , \"prevPage\" : null, \"lastPage\" : 0 , \"nextPage\" : null } , \"links\" : { \"first\" : \"https://api.enclave.io/org/<orgId>/systems\" , \"prev\" : null, \"next\" : null, \"last\" : \"https://api.enclave.io/org/<orgId>/systems\" } , \"items\" : [ { \"systemId\" : \"ABC\" , \"description\" : \"John's Laptop\" , \"state\" : \"Connected\" , \"customDns\" : [] , \"lastSeen\" : \"2021-03-31T11:31:44.3846701Z\" , \"enrolledAt\" : \"2021-03-31T10:55:41.291Z\" , \"enrolmentKeyId\" : 1 , \"enrolmentKeyDescription\" : \"Workstations\" , \"isEnabled\" : true, \"connectedFrom\" : \"X.X.X.X\" , \"hostname\" : \"JOHN-LAPTOP\" , \"platformType\" : \"Windows\" , \"osVersion\" : \"Microsoft Windows 10 Pro (10.0.19041)\" , \"enclaveVersion\" : \"2021.3.24.0\" , \"tags\" : [ { \"tag\" : \"quickstart\" } ] } ] } In subsequent examples, we'll refer to our organisation ID with $orgId , much as we did with $token .","title":"Organisation ID"},{"location":"api/#parameters","text":"For GET requests, all additional parameters not already specified in the URL can be passed as query string parameters: $ curl --oauth2-bearer $token https://api.enclave.io/org/ $orgId /systems?search = Jane In this example, we're adding the additional search parameter to filter the retrieved list is passed in the query string. For POST , PATCH , PUT and DELETE requests, parameters not included in the URL should be provided as JSON in the request body, with a Content-Type of application/json . $ curl --oauth2-bearer $token \\ -H 'Content-Type: application/json' \\ -d '{\"description\": \"My New Key\"}' \\ https://api.enclave.io/org/ $orgId /enrolment-keys The above example creates a new Enrolment Key called \"My New Key\", and returns the created key.","title":"Parameters"},{"location":"api/#timestamps","text":"All date/time values returned from our API are formatted in ISO8601 format (e.g. 2021-03-31T11:31:44.3846701Z ), and always in the UTC timezone.","title":"Timestamps"},{"location":"api/#user-agent-header","text":"All requests to the Enclave API must provide a User-Agent header (your requests will fail without one). We ask that you specify a User-Agent describing your application, to help identify it. Here's an example with curl: $ curl -A \"my-app-integration\" --oauth2-bearer $token https://api.enclave.io/org/ $orgId /systems?search = Jane","title":"User-Agent Header"},{"location":"api/#api-errors","text":"Errors from the API are returned using the standard Problem Details format ( RFC 7807 ). We try to make the information returned in these errors as useful as possible: $ curl --oauth2-bearer $token -i https://api.enclave.io/org/ $orgId /systems/NOTASYSTEM HTTP/2 404 server: nginx date: Thu, 01 Apr 2021 14 :50:15 GMT content-type: application/problem+json ; charset = utf-8 cache-control: no-cache, no-store, must-revalidate pragma: no-cache expires: 0 { \"type\" : \"https://api.enclave.io/problems/type/system-not-found\" , \"title\" : \"System cannot be found\" , \"status\" : 404 , \"detail\" : \"System with Enclave identity NOTASYSTEM does not exist, or your access rights do not allow access to it.\" , \"instance\" : \"https://api.enclave.io/problems/instance/7a206c0eb9208c4caab0975333ce47eb\" , \"traceId\" : \"00-7a206c0eb9208c4caab0975333ce47eb-3aa520cfe7bed641-00\" } Most error responses include a traceId value. You can include this value in support discussions to help us narrow down your problem.","title":"API Errors"},{"location":"api/guides/","text":"","title":"Guides"},{"location":"api/reference/","text":"API Reference The root URL of our API server ( https://api.enclave.io/ ) hosts a Swagger UI that you can use to view all our endpoints, including documentation, and test them out.","title":"Reference"},{"location":"api/reference/#api-reference","text":"The root URL of our API server ( https://api.enclave.io/ ) hosts a Swagger UI that you can use to view all our endpoints, including documentation, and test them out.","title":"API Reference"},{"location":"cli/add/","text":"","title":"Add"},{"location":"cli/disable/","text":"","title":"Disable"},{"location":"cli/enable/","text":"","title":"Enable"},{"location":"cli/enrol/","text":"","title":"Enrol"},{"location":"cli/help/","text":"","title":"Help"},{"location":"cli/install-adapter/","text":"","title":"Install adapter"},{"location":"cli/list-adapters/","text":"","title":"List adapters"},{"location":"cli/remove-adapter/","text":"","title":"Remove adapter"},{"location":"cli/remove/","text":"","title":"Remove"},{"location":"cli/start/","text":"","title":"Start"},{"location":"cli/status/","text":"","title":"Status"},{"location":"cli/stop/","text":"","title":"Stop"},{"location":"cli/version/","text":"","title":"Version"},{"location":"concepts/architecture/","text":"todo Introduce policy-based connectivity Architecture Patents and patents-pending: WO2017060675A1, GB2543072A, US20180287803A1 Introduction The Enclave Network Fabric is client-side software, installed on operating systems running on bare metal, as virtual machines and hypervisors, on cloud compute resources or containers. The Enclave Network Fabric quickly and easily builds secure, private and direct connections to other systems also running the Enclave Network Fabric software. Enclave does this by creating virtual network interfaces on each operating system where it is installed, allowing applications transparently bind to and use the Enclave virtual network to seamlessly communicate with each other as if they were on the same local area network. Enclave builds connectivity at OSI layer 2, encapsulating any protocols which sit above Ethernet frames, so in addition to carrying IP traffic, Enclave can also carry typically non-routed protocols, like NetBIOS and Multicast. Connectivity pathways constructed by Enclave do not require firewall ports to be opened and usually does not require changes to your existing infrastructure or network topology to function. To achieve peer-to-peer connectivity without ingress traffic explicitly allowed through the firewall/perimeter/network edge of either endpoint, Enclave Network Fabric software both relies on and communicates with several key services: identity and access control, policy enforcement and peer discovery - all delivered by our SaaS platform. Endpoint Identities Each system, endpoint, device or container enrolled to and running Enclave holds a digital certificate with a globally unique name. Certificates are assigned transparently to endpoints as they are licensed by the end-user. Each endpoint generates, encrypts and locally stores its private key, which never leaves that system. A globally unique digital certificate is issued to each endpoint by our SaaS platform which allows that endpoint to cryptographically attest to its identity. Mutual Intent Endpoints running Enclave only learn of each other\u2019s existence once mutual intent from both parties has been cryptographically established. Prior to this, entities have no knowledge of one another. This is a key concept in which gives rise to authenticate-before-connect connectivity, which serves to effectively cloak systems running Enclave from third party discovery, observation, targeting and attack. Connection Establishment Summary Once mutual intent is confirmed, Enclave builds a Direct Client-to-Client connection (DCC) as opposed to traditional Client-Server connectivity between cooperating entities. The following diagram illustrates the sequence of events by which two or more systems establish mutually authenticated, peer-to-peer connectivity with Enclave. Endpoints are only introduced to one another when mutual intent is demonstrated by both parties, and connections terminate if either party decides to disconnect, or their certificate expires. Note: The control channel relies on our Cloud services to help facilitate and introduce cooperating endpoints, but each data channel is negotiated and authenticated directly between cooperating endpoints with end-to-end encryption \u2014 without the involvement of the Enclave Cloud infrastructure. Part 1: UDP and TCP hole punching UDP and TCP hole punching are commonly used techniques in peer-to-peer networking applications on the Internet involving hosts connecting to each other which reside in discreet and isolated private networks. Both hosts attempting to communicate (from behind NAT devices and closed firewalls) will start sending connection attempts or data to each other, using outbound traffic only and multiple attempts. The first packet received from the other host will be dropped, its firewall was closed and the network address translation table considered the traffic unsolicited. However, after that same firewall and NAT has a record of having sent a packet back to the other machine, it will allow any subsequent packets originating from the sender's address and port number as expected and solicited return traffic. Stated simply, both systems will attempt to communicate with one another simultaneously multiple times. The first a system receives will be dropped, but after that same system has sent data to the other host, any further data originating from that host will be allowed to traverse the firewall and NAT. The Enclave Discovery Service resides on the public Internet and is used to help connecting peers gain knowledge of, and then share with one another their respective public and private IP address information and source port numbers. This gives Enclave peers enough information to attempt UDP/TCP hole punching Direct Client-to-Client bi-directional connections using outbound-only traffic from their inside of their respective private networks, without infrastructure changes or opening the firewall. This technique is also widely used in many other types of peer-to-peer software including VoIP telephony and WebRTC. Security note: Local RFC 1918 IP address information is shared with the Discovery Service, which is in turn shared with cooperating parties with whom you are trying to establish direct, private network connectivity. In the context of WebRTC, sharing of private IP addresses via the client's browser is considered to be undesirable information disclosure as it allows websites to conduct covert reconnaissance and surveillance. Enclave is different. The principle of mutual intent requires cooperation and authentication before a connection is possible, so disclosure of private IP addresses is limited with Enclave to scenarios where Enclave is simply extending an existing real-world agreement to cooperate, as such disclosure of private IP addresses is not considered to be a security concern in this context. Part 2: Mutual Authentication After a bi-directional TCP/UDP connection has been established, it is important to remember that at this point that data channel is unauthenticated, and unencrypted. The connected parties transition the connection to a trusted state without outside assistance, support or communication from other parties. Prior to connection establishment, both systems had expressed intent to communicate with one another based on knowledge of the other system's certificate name. As each system holds its own certificate, and corresponding private key the pair have all the information they need to perform a standard authenticated key exchange. Both parties share their certificates with one another, and the recipient checks the name on the certificate matches an expected connection, and checks the validity of the received certificate. If the certificate is expected and valid, the sender is asked to sign a unique challenge to demonstrate knowledge of their private key to authenticate the connection. This is a mutual action, and both sides must attest knowledge of their private keys. Once the certificate are confirmed to be authentic, the party has gained knowledge of their peer's public key from the exchanged digital certificate. Authenticated knowledge of partner public key is used to compute the encryption keys for the connection. Part 3: End-to-end Encryption All cryptographic features and capabilities in Enclave are implemented with libsodium . Using shared knowledge of each other\u2019s public keys, the two parties can securely compute a set of shared keys using their peer's public key and their own private key. Enclave uses Ed25519 for digital signatures and Curve25519 for ephemeral key exchange and perfect forward secrecy. Algorithm details: rx || tx = BLAKE2B-512(p.n || client_pk || server_pk) One a set of share keys are computed, the rx and tx keys seed a symmetric cipher used to encrypt data before it is placed on the wire. If the processor supports hardware-accelerated AES using Intel SSSE3 extensions and aesni and pclmul instructions then Enclave will prefer the AES256-GCM cipher. Intel Westmere processors (introduced in 2010) and newer meet the requirements, and major cloud vendors (Azure, AWS, DigitalOcean) support these processor features sets across their entire fleet of instance types. For endpoints which are not capable of hardware-accelerated cryptography, Enclave will use ChaCha20-Poly1305 (ChaCha20 stream cipher and Poly1305 authentication MAC). Both ciphers are authenticated encryption schemes (AEAD ciphers) which can recognise improperly-constructed ciphertexts and refuse to decrypt them.","title":"Architecture"},{"location":"concepts/architecture/#architecture","text":"Patents and patents-pending: WO2017060675A1, GB2543072A, US20180287803A1","title":"Architecture"},{"location":"concepts/architecture/#introduction","text":"The Enclave Network Fabric is client-side software, installed on operating systems running on bare metal, as virtual machines and hypervisors, on cloud compute resources or containers. The Enclave Network Fabric quickly and easily builds secure, private and direct connections to other systems also running the Enclave Network Fabric software. Enclave does this by creating virtual network interfaces on each operating system where it is installed, allowing applications transparently bind to and use the Enclave virtual network to seamlessly communicate with each other as if they were on the same local area network. Enclave builds connectivity at OSI layer 2, encapsulating any protocols which sit above Ethernet frames, so in addition to carrying IP traffic, Enclave can also carry typically non-routed protocols, like NetBIOS and Multicast. Connectivity pathways constructed by Enclave do not require firewall ports to be opened and usually does not require changes to your existing infrastructure or network topology to function. To achieve peer-to-peer connectivity without ingress traffic explicitly allowed through the firewall/perimeter/network edge of either endpoint, Enclave Network Fabric software both relies on and communicates with several key services: identity and access control, policy enforcement and peer discovery - all delivered by our SaaS platform.","title":"Introduction"},{"location":"concepts/architecture/#endpoint-identities","text":"Each system, endpoint, device or container enrolled to and running Enclave holds a digital certificate with a globally unique name. Certificates are assigned transparently to endpoints as they are licensed by the end-user. Each endpoint generates, encrypts and locally stores its private key, which never leaves that system. A globally unique digital certificate is issued to each endpoint by our SaaS platform which allows that endpoint to cryptographically attest to its identity.","title":"Endpoint Identities"},{"location":"concepts/architecture/#mutual-intent","text":"Endpoints running Enclave only learn of each other\u2019s existence once mutual intent from both parties has been cryptographically established. Prior to this, entities have no knowledge of one another. This is a key concept in which gives rise to authenticate-before-connect connectivity, which serves to effectively cloak systems running Enclave from third party discovery, observation, targeting and attack.","title":"Mutual Intent"},{"location":"concepts/architecture/#connection-establishment","text":"","title":"Connection Establishment"},{"location":"concepts/architecture/#summary","text":"Once mutual intent is confirmed, Enclave builds a Direct Client-to-Client connection (DCC) as opposed to traditional Client-Server connectivity between cooperating entities. The following diagram illustrates the sequence of events by which two or more systems establish mutually authenticated, peer-to-peer connectivity with Enclave. Endpoints are only introduced to one another when mutual intent is demonstrated by both parties, and connections terminate if either party decides to disconnect, or their certificate expires. Note: The control channel relies on our Cloud services to help facilitate and introduce cooperating endpoints, but each data channel is negotiated and authenticated directly between cooperating endpoints with end-to-end encryption \u2014 without the involvement of the Enclave Cloud infrastructure.","title":"Summary"},{"location":"concepts/architecture/#part-1-udp-and-tcp-hole-punching","text":"UDP and TCP hole punching are commonly used techniques in peer-to-peer networking applications on the Internet involving hosts connecting to each other which reside in discreet and isolated private networks. Both hosts attempting to communicate (from behind NAT devices and closed firewalls) will start sending connection attempts or data to each other, using outbound traffic only and multiple attempts. The first packet received from the other host will be dropped, its firewall was closed and the network address translation table considered the traffic unsolicited. However, after that same firewall and NAT has a record of having sent a packet back to the other machine, it will allow any subsequent packets originating from the sender's address and port number as expected and solicited return traffic. Stated simply, both systems will attempt to communicate with one another simultaneously multiple times. The first a system receives will be dropped, but after that same system has sent data to the other host, any further data originating from that host will be allowed to traverse the firewall and NAT. The Enclave Discovery Service resides on the public Internet and is used to help connecting peers gain knowledge of, and then share with one another their respective public and private IP address information and source port numbers. This gives Enclave peers enough information to attempt UDP/TCP hole punching Direct Client-to-Client bi-directional connections using outbound-only traffic from their inside of their respective private networks, without infrastructure changes or opening the firewall. This technique is also widely used in many other types of peer-to-peer software including VoIP telephony and WebRTC. Security note: Local RFC 1918 IP address information is shared with the Discovery Service, which is in turn shared with cooperating parties with whom you are trying to establish direct, private network connectivity. In the context of WebRTC, sharing of private IP addresses via the client's browser is considered to be undesirable information disclosure as it allows websites to conduct covert reconnaissance and surveillance. Enclave is different. The principle of mutual intent requires cooperation and authentication before a connection is possible, so disclosure of private IP addresses is limited with Enclave to scenarios where Enclave is simply extending an existing real-world agreement to cooperate, as such disclosure of private IP addresses is not considered to be a security concern in this context.","title":"Part 1: UDP and TCP hole punching"},{"location":"concepts/architecture/#part-2-mutual-authentication","text":"After a bi-directional TCP/UDP connection has been established, it is important to remember that at this point that data channel is unauthenticated, and unencrypted. The connected parties transition the connection to a trusted state without outside assistance, support or communication from other parties. Prior to connection establishment, both systems had expressed intent to communicate with one another based on knowledge of the other system's certificate name. As each system holds its own certificate, and corresponding private key the pair have all the information they need to perform a standard authenticated key exchange. Both parties share their certificates with one another, and the recipient checks the name on the certificate matches an expected connection, and checks the validity of the received certificate. If the certificate is expected and valid, the sender is asked to sign a unique challenge to demonstrate knowledge of their private key to authenticate the connection. This is a mutual action, and both sides must attest knowledge of their private keys. Once the certificate are confirmed to be authentic, the party has gained knowledge of their peer's public key from the exchanged digital certificate. Authenticated knowledge of partner public key is used to compute the encryption keys for the connection.","title":"Part 2: Mutual Authentication"},{"location":"concepts/architecture/#part-3-end-to-end-encryption","text":"All cryptographic features and capabilities in Enclave are implemented with libsodium . Using shared knowledge of each other\u2019s public keys, the two parties can securely compute a set of shared keys using their peer's public key and their own private key. Enclave uses Ed25519 for digital signatures and Curve25519 for ephemeral key exchange and perfect forward secrecy. Algorithm details: rx || tx = BLAKE2B-512(p.n || client_pk || server_pk) One a set of share keys are computed, the rx and tx keys seed a symmetric cipher used to encrypt data before it is placed on the wire. If the processor supports hardware-accelerated AES using Intel SSSE3 extensions and aesni and pclmul instructions then Enclave will prefer the AES256-GCM cipher. Intel Westmere processors (introduced in 2010) and newer meet the requirements, and major cloud vendors (Azure, AWS, DigitalOcean) support these processor features sets across their entire fleet of instance types. For endpoints which are not capable of hardware-accelerated cryptography, Enclave will use ChaCha20-Poly1305 (ChaCha20 stream cipher and Poly1305 authentication MAC). Both ciphers are authenticated encryption schemes (AEAD ciphers) which can recognise improperly-constructed ciphertexts and refuse to decrypt them.","title":"Part 3: End-to-end Encryption"},{"location":"concepts/principles/","text":"","title":"Principles"},{"location":"concepts/connectivity/nat/","text":"","title":"Nat"},{"location":"concepts/connectivity/requirements/","text":"ports numbers outbound connectivity IP whitelisting our inf.","title":"Requirements"},{"location":"concepts/connectivity/telemetry/","text":"","title":"Telemetry"},{"location":"concepts/security/certificates/","text":"Key management","title":"Certificates"},{"location":"concepts/security/considerations/","text":"","title":"Considerations"},{"location":"concepts/security/encryption/","text":"","title":"Encryption"},{"location":"concepts/security/threat-model/","text":"","title":"Threat model"},{"location":"getting-started/attach-tags/","text":"Attach Tags Introduction Tags are free-form text labels attached to one or more systems in your account. Tags allow administrators to group systems together which share similar characteristics (i.e. business unit, security level or function). Tags can be manually added to an enrolled system, or an Enrolment Key can be configured to apply an initial set of Tags to enrolling systems. The following graphic illustrates how Tags could be applied to enrolled systems. Each enrolled system, the workstation desktop-d983gw and the server gitlab are members of Tags specific to their function; both systems are also members of the org.any Tag. Production use: This guide suggests example Tags. You can (and should) create Tags which reflect the structure of your organisation for use in production. Visit the Tags section of the handbook to learn more about creating, naming and managing Tags. Add Tags In the Portal, navigate to the Systems page and confirm at least two systems are enrolled and showing as connected. Tag your first system Select the first system you've enrolled to open its details pane. Use the pencil icon (top-right of the pane) to enter edit mode. Give this first system a recognisable description ( e.g. Jane's Laptop ). Add the Tags org.workstations and org.any to this first system and click Save. Tag your second system Open the details pane for the second system you've enrolled. Use the pencil icon to enter edit mode. Give the second system a recognisable description ( e.g. Web Server ). Add the Tags org.servers and org.any to this second system and click Save. Summary The Portal should indicate that you've assigned two Tags to each system: System Description Tags The first system you enrolled e.g. Jane's Laptop org.workstations org.any The second system you enrolled e.g. Web Server org.servers org.any Great! You've successfully tagged your first systems. Next define a policy to establish connectivity between them.","title":"Attach tags"},{"location":"getting-started/attach-tags/#attach-tags","text":"","title":"Attach Tags"},{"location":"getting-started/attach-tags/#introduction","text":"Tags are free-form text labels attached to one or more systems in your account. Tags allow administrators to group systems together which share similar characteristics (i.e. business unit, security level or function). Tags can be manually added to an enrolled system, or an Enrolment Key can be configured to apply an initial set of Tags to enrolling systems. The following graphic illustrates how Tags could be applied to enrolled systems. Each enrolled system, the workstation desktop-d983gw and the server gitlab are members of Tags specific to their function; both systems are also members of the org.any Tag. Production use: This guide suggests example Tags. You can (and should) create Tags which reflect the structure of your organisation for use in production. Visit the Tags section of the handbook to learn more about creating, naming and managing Tags.","title":"Introduction"},{"location":"getting-started/attach-tags/#add-tags","text":"In the Portal, navigate to the Systems page and confirm at least two systems are enrolled and showing as connected.","title":"Add Tags"},{"location":"getting-started/attach-tags/#tag-your-first-system","text":"Select the first system you've enrolled to open its details pane. Use the pencil icon (top-right of the pane) to enter edit mode. Give this first system a recognisable description ( e.g. Jane's Laptop ). Add the Tags org.workstations and org.any to this first system and click Save.","title":"Tag your first system"},{"location":"getting-started/attach-tags/#tag-your-second-system","text":"Open the details pane for the second system you've enrolled. Use the pencil icon to enter edit mode. Give the second system a recognisable description ( e.g. Web Server ). Add the Tags org.servers and org.any to this second system and click Save.","title":"Tag your second system"},{"location":"getting-started/attach-tags/#summary","text":"The Portal should indicate that you've assigned two Tags to each system: System Description Tags The first system you enrolled e.g. Jane's Laptop org.workstations org.any The second system you enrolled e.g. Web Server org.servers org.any Great! You've successfully tagged your first systems. Next define a policy to establish connectivity between them.","title":"Summary"},{"location":"getting-started/define-policy/","text":"Define Policy Now we'll create a Policy to enable connectivity between your tagged systems. Policies determine which systems can connect to each other, and which can't. Each Policy is composed of at least two Tags, one assigned to the Sender side of the policy, and the other the Receiver side of Policy. Any systems which are members of Tags added to the Sender side of policy may originate traffic to any systems which are members of Tags added to the Receiver side of the same policy. Depending on how you arrange the Tags in your Policy you can create either a partially connected or a fully connected mesh. Production use: This guide suggests creating some example policies. You can (and should) create policies which reflect the structure of your organisation for use in production. Visit the Policy section of the handbook to learn more about creating, naming and managing policies. Partially connected mesh In a partially connected mesh, only specific systems connect to one another. Here we'll define a policy that connects systems tagged with org.workstations to systems tagged with org.servers . Connectivity is established between the left and right sides of the policy ( Sender to Receiver ) but not between systems on the same side. In the Portal, navigate to the Policies page. Select the Create a new policy button and describe the new Policy as Server Access Add the org.workstations Tag to the Sender side of the policy. Add the org.servers Tag to the Receiver side of the policy. Save the policy. Congratulations! Your new policy will take effect immediately and Enclave will quickly build direct connectivity between your enrolled systems. You've successfully built your first Enclave connection. Fully connected mesh In a fully connected mesh, all systems in the Policy are connected to one another Here we'll define a policy that connects any systems tagged with org.any to any other systems tagged with org.any to explicitly create a fully connected mesh. Production use: Fully connected mesh networks may create large numbers of connections between participating systems. A fully connected mesh of 16 systems will create 120 connections, but a mesh with 32 participants will create 496 connections. You should consider the capabilities of your underlying network infrastructure when deploying a fully connected mesh. Learn more . In the Portal, navigate to the Policies page. Select the Create a new policy button and describe the new Policy as Full Mesh Add the org.any Tag to the Sender side of the policy. Add the org.any Tag to the Receiver side of the policy. Save the policy. Congratulations! Your new policy will take effect immediately and Enclave will quickly build direct connectivity between your enrolled systems. You've successfully built your first Enclave connection. Any future systems you enrol and attach these Tags to will automatically inherit the connectivity defined in this policy, helpful in auto-scaling scenarios to minimise the management overhead of connecting additional systems. Now that you've got your first connection, see next steps to learn more about what you can do with Enclave.","title":"Define policy"},{"location":"getting-started/define-policy/#define-policy","text":"Now we'll create a Policy to enable connectivity between your tagged systems. Policies determine which systems can connect to each other, and which can't. Each Policy is composed of at least two Tags, one assigned to the Sender side of the policy, and the other the Receiver side of Policy. Any systems which are members of Tags added to the Sender side of policy may originate traffic to any systems which are members of Tags added to the Receiver side of the same policy. Depending on how you arrange the Tags in your Policy you can create either a partially connected or a fully connected mesh. Production use: This guide suggests creating some example policies. You can (and should) create policies which reflect the structure of your organisation for use in production. Visit the Policy section of the handbook to learn more about creating, naming and managing policies. Partially connected mesh In a partially connected mesh, only specific systems connect to one another. Here we'll define a policy that connects systems tagged with org.workstations to systems tagged with org.servers . Connectivity is established between the left and right sides of the policy ( Sender to Receiver ) but not between systems on the same side. In the Portal, navigate to the Policies page. Select the Create a new policy button and describe the new Policy as Server Access Add the org.workstations Tag to the Sender side of the policy. Add the org.servers Tag to the Receiver side of the policy. Save the policy. Congratulations! Your new policy will take effect immediately and Enclave will quickly build direct connectivity between your enrolled systems. You've successfully built your first Enclave connection. Fully connected mesh In a fully connected mesh, all systems in the Policy are connected to one another Here we'll define a policy that connects any systems tagged with org.any to any other systems tagged with org.any to explicitly create a fully connected mesh. Production use: Fully connected mesh networks may create large numbers of connections between participating systems. A fully connected mesh of 16 systems will create 120 connections, but a mesh with 32 participants will create 496 connections. You should consider the capabilities of your underlying network infrastructure when deploying a fully connected mesh. Learn more . In the Portal, navigate to the Policies page. Select the Create a new policy button and describe the new Policy as Full Mesh Add the org.any Tag to the Sender side of the policy. Add the org.any Tag to the Receiver side of the policy. Save the policy. Congratulations! Your new policy will take effect immediately and Enclave will quickly build direct connectivity between your enrolled systems. You've successfully built your first Enclave connection. Any future systems you enrol and attach these Tags to will automatically inherit the connectivity defined in this policy, helpful in auto-scaling scenarios to minimise the management overhead of connecting additional systems. Now that you've got your first connection, see next steps to learn more about what you can do with Enclave.","title":"Define Policy"},{"location":"getting-started/installation/","text":"Installation In this quick start guide we will start your journey with Enclave by showing you how to enrol your first systems and use policy and tags to establish a private network between them. Prerequisites To follow this guide, you will need: An Enclave account, it's free to register At least two computers, devices or containers where you can install software Get an Enrolment Key You will need an Enrolment Key from your account to install Enclave. Enrolment Keys allow you to enrol new systems or devices to your Enclave account. Login to your account in the Enclave Portal Navigate to the Enrolment Keys page and select the Quick Start Key from the table In the details pane, select View key and make a note of the 30 character Enrolment Key Security note: Enrolment keys should be treated as secrets; handle, share and store your Enrolment Keys as you would any other organisational secret. Production use: This guide uses a Quick Start Key which was automatically created when you first registered for an account. You can (and should) create your own Enrolment Keys for use in production. Visit the Enrolment Keys section of the handbook to learn more about creating and managing Enrolment Keys. Install Enclave You will need to install Enclave on at least two separate devices, systems or containers. Windows Requires Windows 7, 8, 10 or Windows Server 2012, 2016 and 2019 (any edition). Packages are available for the x64 architecture. Download and run the latest Windows installer Download Enclave for Windows Package checksum ( loading ... ) ---------------------------------------------------------------- Provide the Quick Start Key from your account to complete the installation macOS Requires at least OSX 10.10 (Yosemite). Install the homebrew package manager if you don't already have it. Install Enclave brew install enclave You will likely be prompted to provide local credentials. Once installed, enrol your system with your Enclave Organisation sudo enclave enrol Provide the Quick Start Key from your account to complete the installation. Linux Select your distribution: Ubuntu / Debian Requires at least Ubuntu 14.04 LTS or Debian 9. Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Quick Start Key to complete the installation CentOS / RHEL Requires at least CentOS 7.6 or RHEL 7. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Fedora Requires at least Fedora 32. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Amazon Linux Requires at least Amazon Linux 2018.03. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Arch Linux Requires at least Arch Linux 2020.08.01. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Raspbian Requires at least Raspbian 10 (buster). Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Quick Start Key to complete the installation Containers Select your platform: Docker Create a docker-compose.yml file: version : '3.1' services : enclave-fabric : container_name : fabric image : enclavenetworks/enclave:latest restart : always cap_add : - NET_ADMIN devices : - /dev/net/tun environment : ENCLAVE_ENROLMENT_KEY : XXXXX-XXXXX-XXXXX-XXXXX-XXXXX volumes : - enclave-config:/etc/enclave/profiles - enclave-logs:/var/log/enclave volumes : enclave-config : enclave-logs : Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Quick Start Key Bring the container up using docker-compose up -d Verify Enclave is running insider the container with docker exec fabric enclave status Kubernetes Add the enclave-sidecar to your pod yaml file under the containers: section. For example, if your pod contains an nginx container: spec : containers : - name : nginx-container image : nginx:1.7.9 ports : - containerPort : 80 Add the enclave-sidecar definition to below your existing pod: spec : containers : - name : nginx-container ... - name : enclave-sidecar image : enclavenetworks/enclave:latest env : - name : \"ENCLAVE_ENROLMENT_KEY\" value : \"XXXXX-XXXXX-XXXXX-XXXXX-XXXXX\" securityContext : capabilities : add : [ 'NET_ADMIN' ] volumeMounts : - name : tun mountPath : /dev/net/tun volumes : - name : tun hostPath : type : 'CharDevice' path : /dev/net/tun See pod.yaml for a complete example. Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Quick Start Key Push your changes to the cluster using kubectl apply or your preferred method Network Attached Storage Select your device: Synology NAS We have beta support for Synology NAS drives (running on DSM 7.0 or later) via docker. Please follow our guide to installing Enclave on your Synology NAS drive . Congratulations! You've successfully enrolled a new system to your Enclave account. Once you've enrolled at least two systems, continue by attaching tags to your newly enrolled systems. fetch(\"https://install.enclave.io/manifest/windows/setup.json\", { method: 'get' }) .then(response => response.json()) .then(jsonResult => { var latest = jsonResult.ReleaseVersions.reverse().find(releaseVersion => { return releaseVersion.ReleaseType === 'GA'; }); var url = latest?.Packages[0].Url; var hash = latest?.Packages[0].Hash; var hashAlg = latest?.Packages[0].HashAlg; document.getElementById(\"download-windows-setup\").href = url; document.getElementById(\"setup-url\").innerHTML = url; document.getElementById(\"windows-hash-alg\").innerHTML = hashAlg.toLowerCase(); document.getElementById(\"windows-checksum\").innerHTML = base64ToHex(hash); }) .catch(err => { console.log(err); document.getElementById(\"download-windows-setup\").href = \"https://portal.enclave.io/my/new-system\"; }); function base64ToHex(str) { const raw = atob(str); let result = ''; for (let i = 0; i < raw.length; i++) { const hex = raw.charCodeAt(i).toString(16); result += (hex.length === 2 ? hex : '0' + hex); } return result; }","title":"Installation"},{"location":"getting-started/installation/#installation","text":"In this quick start guide we will start your journey with Enclave by showing you how to enrol your first systems and use policy and tags to establish a private network between them.","title":"Installation"},{"location":"getting-started/installation/#prerequisites","text":"To follow this guide, you will need: An Enclave account, it's free to register At least two computers, devices or containers where you can install software","title":"Prerequisites"},{"location":"getting-started/installation/#get-an-enrolment-key","text":"You will need an Enrolment Key from your account to install Enclave. Enrolment Keys allow you to enrol new systems or devices to your Enclave account. Login to your account in the Enclave Portal Navigate to the Enrolment Keys page and select the Quick Start Key from the table In the details pane, select View key and make a note of the 30 character Enrolment Key Security note: Enrolment keys should be treated as secrets; handle, share and store your Enrolment Keys as you would any other organisational secret. Production use: This guide uses a Quick Start Key which was automatically created when you first registered for an account. You can (and should) create your own Enrolment Keys for use in production. Visit the Enrolment Keys section of the handbook to learn more about creating and managing Enrolment Keys.","title":"Get an Enrolment Key"},{"location":"getting-started/installation/#install-enclave","text":"You will need to install Enclave on at least two separate devices, systems or containers. Windows Requires Windows 7, 8, 10 or Windows Server 2012, 2016 and 2019 (any edition). Packages are available for the x64 architecture. Download and run the latest Windows installer Download Enclave for Windows Package checksum ( loading ... ) ---------------------------------------------------------------- Provide the Quick Start Key from your account to complete the installation macOS Requires at least OSX 10.10 (Yosemite). Install the homebrew package manager if you don't already have it. Install Enclave brew install enclave You will likely be prompted to provide local credentials. Once installed, enrol your system with your Enclave Organisation sudo enclave enrol Provide the Quick Start Key from your account to complete the installation. Linux Select your distribution: Ubuntu / Debian Requires at least Ubuntu 14.04 LTS or Debian 9. Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Quick Start Key to complete the installation CentOS / RHEL Requires at least CentOS 7.6 or RHEL 7. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Fedora Requires at least Fedora 32. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Amazon Linux Requires at least Amazon Linux 2018.03. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Arch Linux Requires at least Arch Linux 2020.08.01. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Quick Start Key to complete the installation Raspbian Requires at least Raspbian 10 (buster). Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Quick Start Key to complete the installation Containers Select your platform: Docker Create a docker-compose.yml file: version : '3.1' services : enclave-fabric : container_name : fabric image : enclavenetworks/enclave:latest restart : always cap_add : - NET_ADMIN devices : - /dev/net/tun environment : ENCLAVE_ENROLMENT_KEY : XXXXX-XXXXX-XXXXX-XXXXX-XXXXX volumes : - enclave-config:/etc/enclave/profiles - enclave-logs:/var/log/enclave volumes : enclave-config : enclave-logs : Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Quick Start Key Bring the container up using docker-compose up -d Verify Enclave is running insider the container with docker exec fabric enclave status Kubernetes Add the enclave-sidecar to your pod yaml file under the containers: section. For example, if your pod contains an nginx container: spec : containers : - name : nginx-container image : nginx:1.7.9 ports : - containerPort : 80 Add the enclave-sidecar definition to below your existing pod: spec : containers : - name : nginx-container ... - name : enclave-sidecar image : enclavenetworks/enclave:latest env : - name : \"ENCLAVE_ENROLMENT_KEY\" value : \"XXXXX-XXXXX-XXXXX-XXXXX-XXXXX\" securityContext : capabilities : add : [ 'NET_ADMIN' ] volumeMounts : - name : tun mountPath : /dev/net/tun volumes : - name : tun hostPath : type : 'CharDevice' path : /dev/net/tun See pod.yaml for a complete example. Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Quick Start Key Push your changes to the cluster using kubectl apply or your preferred method Network Attached Storage Select your device: Synology NAS We have beta support for Synology NAS drives (running on DSM 7.0 or later) via docker. Please follow our guide to installing Enclave on your Synology NAS drive . Congratulations! You've successfully enrolled a new system to your Enclave account. Once you've enrolled at least two systems, continue by attaching tags to your newly enrolled systems. fetch(\"https://install.enclave.io/manifest/windows/setup.json\", { method: 'get' }) .then(response => response.json()) .then(jsonResult => { var latest = jsonResult.ReleaseVersions.reverse().find(releaseVersion => { return releaseVersion.ReleaseType === 'GA'; }); var url = latest?.Packages[0].Url; var hash = latest?.Packages[0].Hash; var hashAlg = latest?.Packages[0].HashAlg; document.getElementById(\"download-windows-setup\").href = url; document.getElementById(\"setup-url\").innerHTML = url; document.getElementById(\"windows-hash-alg\").innerHTML = hashAlg.toLowerCase(); document.getElementById(\"windows-checksum\").innerHTML = base64ToHex(hash); }) .catch(err => { console.log(err); document.getElementById(\"download-windows-setup\").href = \"https://portal.enclave.io/my/new-system\"; }); function base64ToHex(str) { const raw = atob(str); let result = ''; for (let i = 0; i < raw.length; i++) { const hex = raw.charCodeAt(i).toString(16); result += (hex.length === 2 ? hex : '0' + hex); } return result; }","title":"Install Enclave"},{"location":"getting-started/next-steps/","text":"Next steps Find your Enclave IP address Each system (or device) running Enclave is automatically assigned an IP address from the default range 100.64.0.0/10. Learn more . In order to send data to other systems in your Enclave you will need to know the IP address of your peers, and they will need to know yours. Windows Tray Open Enclave by double clicking on the icon in the Windows tray notification area, or find Enclave in the Start Menu. Linux or Command Line Run enclave status from a command prompt or terminal. In this example, the local Enclave IP address is the value of Virtual address under our Local identity , in this case 100.106.103.219. $ enclave status Local identity: V88R Release version . . : 2021.3.24.0 Profile name. . . . : Universe Profile location. . : /etc/enclave/profiles/Universe.profile Certificate . . . . : CN=V88R Expires=Never (Perpetual Issue) Binding address . . : 0.0.0.0:40517 Local nameserver. . : listening on 100.117.177.98:53 Virtual adapter . . : tap0 (#21) AA:D2:DA:F2:73:96 Virtual address . . : 100.117.177.98 Virtual network . . : 100.64.0.0/10 (255.192.0.0) Capabilities. . . . : enclave\\fakearp active pri=4096 local rewrites=8696 peer discards=3510 : enclave\\unicast active pri=8192 tap eth=2883747 ipv4=2882372 ipv6=1375 - partners total=2980365 spoofed origin discards=0 : enclave\\multicast active pri=8200 igmp membership packets ipv4=0 ipv6=1375 Peer: discover.enclave.io Peer state. . . . . : Up Certificate . . . . : CN=discover.enclave.io Expires=08/06/2024 09:59:59 Endpoint. . . . . . : Tcp/161.35.171.235:443 Peer: PL8 (Gitlab) Peer state. . . . . : Up Certificate . . . . : CN=PL8 Expires=Never (Perpetual Issue) Endpoint. . . . . . : Tcp/134.122.110.217:443 (via relay) MAC address . . . . : CE-37-47-5F-4D-BE (fake arp) Last activity . . . : 0.38 seconds ago Transfer. . . . . . : 14.975 MB received, 274.858 MB sent, link rtt 23 ms Virtual network . . : 100.64.0.0/10 (255.192.0.0) Virtual address . . : 100.81.14.231 Dns . . . . . . . . : pl8.enclave, gitlab.enclave From the CLI output, you can see that this system also has a connection to another peer, a Gitlab server. This Virtual address for this system is also reported, in this case 100.81.14.231 . Find your Enclave DNS hostname Enclave has a built-in DNS resolver. Right click on any connected system (e.g. Gitlab) in the Windows Tray application and select Copy > Hostname . Alternatively consult the output of enclave status to see the Dns names available for each connected peer. On Windows, DNS lookups are automatically configured, so in this example given where we're connected to a GitLab server we could ping gitlab.enclave or load https://gitlab.enclave in a browser. On Linux, administrators must manually configure the operating system to use the Enclave DNS resolver \u2014 see how to configure DNS forwarding on Linux . Visit the DNS section to learn how to use the built-in name resolution services inside your Enclave network. Test connectivity Now that we know the IP address of one of our connected peers (in this example, 100.81.14.231 is the IP address of a connected Gitlab server and gitlab.enclave its hostname) let's test connectivity. Pings are a great start, but don't forget to check the host local Windows or Linux firewalls on the destination system to ensure ICMP traffic is permitted. C:\\> ping gitlab.enclave Pinging gitlab.enclave [100.81.14.231] with 32 bytes of data: Reply from 100.81.14.231: bytes=32 time=1ms TTL=128 Reply from 100.81.14.231: bytes=32 time=1ms TTL=128 Reply from 100.81.14.231: bytes=32 time=1ms TTL=128 Architecture How Enclave works. Learn more Tutorials Configure DNS forwarding on Linux What are the 100.64.x.x IP addresses","title":"Next steps"},{"location":"getting-started/next-steps/#next-steps","text":"","title":"Next steps"},{"location":"getting-started/next-steps/#find-your-enclave-ip-address","text":"Each system (or device) running Enclave is automatically assigned an IP address from the default range 100.64.0.0/10. Learn more . In order to send data to other systems in your Enclave you will need to know the IP address of your peers, and they will need to know yours. Windows Tray Open Enclave by double clicking on the icon in the Windows tray notification area, or find Enclave in the Start Menu. Linux or Command Line Run enclave status from a command prompt or terminal. In this example, the local Enclave IP address is the value of Virtual address under our Local identity , in this case 100.106.103.219. $ enclave status Local identity: V88R Release version . . : 2021.3.24.0 Profile name. . . . : Universe Profile location. . : /etc/enclave/profiles/Universe.profile Certificate . . . . : CN=V88R Expires=Never (Perpetual Issue) Binding address . . : 0.0.0.0:40517 Local nameserver. . : listening on 100.117.177.98:53 Virtual adapter . . : tap0 (#21) AA:D2:DA:F2:73:96 Virtual address . . : 100.117.177.98 Virtual network . . : 100.64.0.0/10 (255.192.0.0) Capabilities. . . . : enclave\\fakearp active pri=4096 local rewrites=8696 peer discards=3510 : enclave\\unicast active pri=8192 tap eth=2883747 ipv4=2882372 ipv6=1375 - partners total=2980365 spoofed origin discards=0 : enclave\\multicast active pri=8200 igmp membership packets ipv4=0 ipv6=1375 Peer: discover.enclave.io Peer state. . . . . : Up Certificate . . . . : CN=discover.enclave.io Expires=08/06/2024 09:59:59 Endpoint. . . . . . : Tcp/161.35.171.235:443 Peer: PL8 (Gitlab) Peer state. . . . . : Up Certificate . . . . : CN=PL8 Expires=Never (Perpetual Issue) Endpoint. . . . . . : Tcp/134.122.110.217:443 (via relay) MAC address . . . . : CE-37-47-5F-4D-BE (fake arp) Last activity . . . : 0.38 seconds ago Transfer. . . . . . : 14.975 MB received, 274.858 MB sent, link rtt 23 ms Virtual network . . : 100.64.0.0/10 (255.192.0.0) Virtual address . . : 100.81.14.231 Dns . . . . . . . . : pl8.enclave, gitlab.enclave From the CLI output, you can see that this system also has a connection to another peer, a Gitlab server. This Virtual address for this system is also reported, in this case 100.81.14.231 .","title":"Find your Enclave IP address"},{"location":"getting-started/next-steps/#find-your-enclave-dns-hostname","text":"Enclave has a built-in DNS resolver. Right click on any connected system (e.g. Gitlab) in the Windows Tray application and select Copy > Hostname . Alternatively consult the output of enclave status to see the Dns names available for each connected peer. On Windows, DNS lookups are automatically configured, so in this example given where we're connected to a GitLab server we could ping gitlab.enclave or load https://gitlab.enclave in a browser. On Linux, administrators must manually configure the operating system to use the Enclave DNS resolver \u2014 see how to configure DNS forwarding on Linux . Visit the DNS section to learn how to use the built-in name resolution services inside your Enclave network.","title":"Find your Enclave DNS hostname"},{"location":"getting-started/next-steps/#test-connectivity","text":"Now that we know the IP address of one of our connected peers (in this example, 100.81.14.231 is the IP address of a connected Gitlab server and gitlab.enclave its hostname) let's test connectivity. Pings are a great start, but don't forget to check the host local Windows or Linux firewalls on the destination system to ensure ICMP traffic is permitted. C:\\> ping gitlab.enclave Pinging gitlab.enclave [100.81.14.231] with 32 bytes of data: Reply from 100.81.14.231: bytes=32 time=1ms TTL=128 Reply from 100.81.14.231: bytes=32 time=1ms TTL=128 Reply from 100.81.14.231: bytes=32 time=1ms TTL=128","title":"Test connectivity"},{"location":"getting-started/next-steps/#architecture","text":"How Enclave works. Learn more","title":"Architecture"},{"location":"getting-started/next-steps/#tutorials","text":"Configure DNS forwarding on Linux What are the 100.64.x.x IP addresses","title":"Tutorials"},{"location":"kb/","text":"Documentation / Knowledge Base Knowledge Base The knowledge base serves as a repository how-to articles and guides designed to help you get the most out of your Enclave account. If you can't find what you're looking for in our knowledge base you can ask for help in our community support channels. Account Management Cancel subscription or close account Transfer organisation ownership to another account DNS How to configure DNS forwarding on Linux Network What are the 100.64.x.x IP addresses Can\u2019t find what you\u2019re looking for? We\u2019re happy to help. Contact our team .","title":"Knowledge Base"},{"location":"kb/#knowledge-base","text":"The knowledge base serves as a repository how-to articles and guides designed to help you get the most out of your Enclave account. If you can't find what you're looking for in our knowledge base you can ask for help in our community support channels.","title":"Knowledge Base"},{"location":"kb/#account-management","text":"Cancel subscription or close account Transfer organisation ownership to another account","title":"Account Management"},{"location":"kb/#dns","text":"How to configure DNS forwarding on Linux","title":"DNS"},{"location":"kb/#network","text":"What are the 100.64.x.x IP addresses","title":"Network"},{"location":"kb/#cant-find-what-youre-looking-for","text":"We\u2019re happy to help. Contact our team .","title":"Can\u2019t find what you\u2019re looking for?"},{"location":"kb/cancel-subscription/","text":"Documentation / Knowledge Base How to cancel your subscription or close your account For help cancelling your subscription or closing your account, please contact support@enclave.io . Last updated Aug 19, 2021","title":"Cancel subscription"},{"location":"kb/cancel-subscription/#how-to-cancel-your-subscription-or-close-your-account","text":"For help cancelling your subscription or closing your account, please contact support@enclave.io . Last updated Aug 19, 2021","title":"How to cancel your subscription or close your account"},{"location":"kb/certificate-lifetime-management-and-best-practice/","text":"Documentation / Knowledge Base Certificate lifetime management and best practice Connections in Enclave are governed by certificates. When a certificate is issued it contains NotBefore and a NotAfter fields expressed as a 64 bit integer offset from the Unix time epoch (seconds elapsed since 00:00:00 UTC on 1 January 1970). A value of -1 in the NotAfter field indicates the certificate has no effective expiry date, and has been issued in perpetuity. ... \"NotBefore\": 1549156210, \"NotAfter\": -1, ... Certificates should be issued with validity periods matching the expected lifetime of enrolling systems \u2014 hours, days, years, or in perpetuity. For systems which have no known future date of decommission, it is recommended to issue certificates that are valid in perpetuity. In the event of system, or private key compromise the certificate should be revoked using the portal. Perpetual Issue Certificates Traditional TLS certificate management best practices are evolving towards recommending against issuing certificates with extended lifetimes. The purpose of this section is to demonstrate that certificates don't need to expire to provide good security properties. Over the last decade, spurred mainly by the introduction of automation technologies wrapping the certificate renewal process and the advent of the wonderful LetsEncrypt project, conventional thinking has started to drift toward the use of short-lived certificates with TLS. There are several reasons for this, in short compromised certificates are hard to revoke, and the longer a certificate is valid, the more likely it can be used nefariously in the event of compromise precisely because revocation is tricky. Certificate revocation options are imperfect and represent a single point of failure (OCSP responders and CRL distribution points not recognised as reliable network parties, and soft-fails are common practice). Long-lived static keys have increased value to attackers and are exposed to the possibility of theft for longer. A shorter lifetime reduces exposure in the event of key compromise. Revocation infrastructure leads to huge certificate revocation lists and high traffic volume at OCSP servers. Automation is not encouraged by the use of long-lived certificates. In the event that a vulnerability is discovered in a cryptographic primitive (e.g. SHA1) shorter lived certificates force deprecated and vulnerable protocols out of the ecosystem far more quickly. The landscape of TLS is inherently fragmented, Browser vendors, Certificate Authorities, system administrators and software developers all exist in isolation of one another, operating independently and on different time scales. The fractured landscape of TLS means that short-lived certificates, which constantly refresh trust are a vital for the future development of the ecosystem. Enclave however, is not a fragmented landscape and does not suffer the same operational challenges which TLS must endure. Certificate revocation in the Enclave portal is instant and applied globally across your entire estate. Once a certificate is expired or revoked, all connections are instantly, immediately and irrevocably terminated. The most important thing to keep in mind is that the nature of key compromise is such that you almost never know it has happened until it is too late (consider Diginotar as an extreme example). When indicators of compromise suggest that a system may have been attacked, its certificate should be immediately revoked using the Portal (an operation which can be automated using the Portal API). In the event that a system compromise remains undetected, refreshing the private keys has little effect as the fresh keys would simply be extracted a second time from the same compromised system. Equally, Enclave benefits from automatic updates and (optional) forced shutdown of older versions where security vulnerabilities are uncovered, allowing organisations to centrally and effectively manage the risk vs. availability tradeoff. By nature of the fully managed platform, Enclave is able to overcome the drive towards short lived certificates mandated by the fragmented TLS ecosystem and offer the benefits of perpetual issue certificates with no adverse impact to your threat model. In short, for public infrastructure exposing TLS endpoints, short-lived certificates should be adopted wherever possible. Systems connected privately via Enclave can, and should confidently deploy perpetually issued certificates Enrolment key constraints In order to issue a certificate to an enrolling system, an Enrolment Key must first be created in the Portal. Enrolment Keys created without a configured Validity Period constraint will, by default, issue certificates that are valid in perpetuity. Enrolment Keys created with a Validity Period constraint will remain valid from the time when the Enrolment Key is used, for the expressed duration of the constraint. That is to say, if a Single Use Enrolment Key were created on the 1st of January, with a Validity Period constraint of 7 days, and remained unused until the 1st of February then - at the time of use - the resulting certificate would be valid for 7 days from the 1st of February. Short-lived, or fixed lifetime certificates are an ideal way to interact with the partners, the supply chain or contractors where an engagement or project has a fixed duration and the connection must not persist beyond a fixed point in time. Further reading How Short-Lived Certificates Improve Certificate Trust (www.digicert.com) Short-Lived Certificates @ Netflix (medium.facilelogin.com) Why bother with short-lived certificates and keys in TLS? (unmitigatedrisk.com) Good certificates die young: what's passive revocation and how's it implemented? (smallstep.com) Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Certificate lifetime management and best practice"},{"location":"kb/certificate-lifetime-management-and-best-practice/#certificate-lifetime-management-and-best-practice","text":"Connections in Enclave are governed by certificates. When a certificate is issued it contains NotBefore and a NotAfter fields expressed as a 64 bit integer offset from the Unix time epoch (seconds elapsed since 00:00:00 UTC on 1 January 1970). A value of -1 in the NotAfter field indicates the certificate has no effective expiry date, and has been issued in perpetuity. ... \"NotBefore\": 1549156210, \"NotAfter\": -1, ... Certificates should be issued with validity periods matching the expected lifetime of enrolling systems \u2014 hours, days, years, or in perpetuity. For systems which have no known future date of decommission, it is recommended to issue certificates that are valid in perpetuity. In the event of system, or private key compromise the certificate should be revoked using the portal.","title":"Certificate lifetime management and best practice"},{"location":"kb/certificate-lifetime-management-and-best-practice/#perpetual-issue-certificates","text":"Traditional TLS certificate management best practices are evolving towards recommending against issuing certificates with extended lifetimes. The purpose of this section is to demonstrate that certificates don't need to expire to provide good security properties. Over the last decade, spurred mainly by the introduction of automation technologies wrapping the certificate renewal process and the advent of the wonderful LetsEncrypt project, conventional thinking has started to drift toward the use of short-lived certificates with TLS. There are several reasons for this, in short compromised certificates are hard to revoke, and the longer a certificate is valid, the more likely it can be used nefariously in the event of compromise precisely because revocation is tricky. Certificate revocation options are imperfect and represent a single point of failure (OCSP responders and CRL distribution points not recognised as reliable network parties, and soft-fails are common practice). Long-lived static keys have increased value to attackers and are exposed to the possibility of theft for longer. A shorter lifetime reduces exposure in the event of key compromise. Revocation infrastructure leads to huge certificate revocation lists and high traffic volume at OCSP servers. Automation is not encouraged by the use of long-lived certificates. In the event that a vulnerability is discovered in a cryptographic primitive (e.g. SHA1) shorter lived certificates force deprecated and vulnerable protocols out of the ecosystem far more quickly. The landscape of TLS is inherently fragmented, Browser vendors, Certificate Authorities, system administrators and software developers all exist in isolation of one another, operating independently and on different time scales. The fractured landscape of TLS means that short-lived certificates, which constantly refresh trust are a vital for the future development of the ecosystem. Enclave however, is not a fragmented landscape and does not suffer the same operational challenges which TLS must endure. Certificate revocation in the Enclave portal is instant and applied globally across your entire estate. Once a certificate is expired or revoked, all connections are instantly, immediately and irrevocably terminated. The most important thing to keep in mind is that the nature of key compromise is such that you almost never know it has happened until it is too late (consider Diginotar as an extreme example). When indicators of compromise suggest that a system may have been attacked, its certificate should be immediately revoked using the Portal (an operation which can be automated using the Portal API). In the event that a system compromise remains undetected, refreshing the private keys has little effect as the fresh keys would simply be extracted a second time from the same compromised system. Equally, Enclave benefits from automatic updates and (optional) forced shutdown of older versions where security vulnerabilities are uncovered, allowing organisations to centrally and effectively manage the risk vs. availability tradeoff. By nature of the fully managed platform, Enclave is able to overcome the drive towards short lived certificates mandated by the fragmented TLS ecosystem and offer the benefits of perpetual issue certificates with no adverse impact to your threat model. In short, for public infrastructure exposing TLS endpoints, short-lived certificates should be adopted wherever possible. Systems connected privately via Enclave can, and should confidently deploy perpetually issued certificates","title":"Perpetual Issue Certificates"},{"location":"kb/certificate-lifetime-management-and-best-practice/#enrolment-key-constraints","text":"In order to issue a certificate to an enrolling system, an Enrolment Key must first be created in the Portal. Enrolment Keys created without a configured Validity Period constraint will, by default, issue certificates that are valid in perpetuity. Enrolment Keys created with a Validity Period constraint will remain valid from the time when the Enrolment Key is used, for the expressed duration of the constraint. That is to say, if a Single Use Enrolment Key were created on the 1st of January, with a Validity Period constraint of 7 days, and remained unused until the 1st of February then - at the time of use - the resulting certificate would be valid for 7 days from the 1st of February. Short-lived, or fixed lifetime certificates are an ideal way to interact with the partners, the supply chain or contractors where an engagement or project has a fixed duration and the connection must not persist beyond a fixed point in time.","title":"Enrolment key constraints"},{"location":"kb/certificate-lifetime-management-and-best-practice/#further-reading","text":"How Short-Lived Certificates Improve Certificate Trust (www.digicert.com) Short-Lived Certificates @ Netflix (medium.facilelogin.com) Why bother with short-lived certificates and keys in TLS? (unmitigatedrisk.com) Good certificates die young: what's passive revocation and how's it implemented? (smallstep.com) Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Further reading"},{"location":"kb/how-to-configure-dns-forwarding-on-linux/","text":"Documentation / Knowledge Base How to configure DNS forwarding on Linux This page only applies if you're running Enclave on Linux. Under Windows and macOS Enclave automatically manages the local name server search order. Enclave runs a local name server bound to the virtual network IP address of each profile. By default this service runs on port 53 and answers queries for names inside the .enclave. zone. By enabling DNS forwarding and including the local Enclave name server in the search order of your operating system's name server list, you can reference and connect to peers by name. The local Enclave name server will resolve peers both by their peer description (for example where the peer V8Z4Y is described as primary.redis.service.lon then it will be resolvable as either primary.redis.service.lon.enclave or V8Z4Y.enclave ). Any spaces in a peer's description field are treated as equivalent to hyphens, so a peer with the descriptions of either home laptop or home-laptop is resolved to its Enclave IP address with the DNS query home-laptop.enclave . DNS resolution of a peer with the description primary.redis.service.lon using Dig: [centos@localhost ~]$ dig @100.105.173.218 primary.redis.service.lon.enclave A ; <<>> DiG 9.11.4-P2-RedHat-9.11.4-9.P2.el7 <<>> @100.105.173.218 primary.redis.service.lon.enclave A ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 46433 ;; flags: qr rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0 ;; WARNING: recursion requested but not available ;; QUESTION SECTION: ;primary.redis.service.lon.enclave. IN A ;; ANSWER SECTION: primary.redis.service.lon.enclave. 0 IN A 100.70.181.144 ;; Query time: 2 msec ;; SERVER: 100.105.173.218#53(100.105.173.218) ;; WHEN: Thu Sep 26 14:50:03 UTC 2019 ;; MSG SIZE rcvd: 67 Pinging a peer using its description primary.redis.service.lon as the hostname: [ centos@localhost ~ ] $ ping primary.redis.service.lon.enclave PING primary.redis.service.lon.enclave ( 100 .70.181.144 ) 56 ( 84 ) bytes of data. 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 1 ttl = 64 time = 0 .881 ms 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 2 ttl = 64 time = 0 .985 ms 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 3 ttl = 64 time = 0 .901 ms 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 4 ttl = 64 time = 0 .882 ms --- primary.redis.service.lon.enclave ping statistics --- 4 packets transmitted, 4 received, 0 % packet loss, time 3003ms rtt min/avg/max/mdev = 0 .881/0.912/0.985/0.047 ms Key Principle: Enclave will not resolve queries for anything outside of the .enclave. zone, and will respond to such questions with SRVFAIL allowing the other name servers to answer the query. Security Note: The local Enclave name server will not respond to queries from connected peers despite listening on port 53 of the virtual network interface ip address. The name server will only reply to queries which originated from the local system. CentOS 7 (dhclient) By default, the /etc/resolv.conf file is configured in CentOS by /usr/sbin/dhclient-script . To add the local Enclave name server to the search list it must be added to /etc/dhcp/dhclient.conf using the prepend option. # add local Enclave name server to search order prepend domain-name-servers 100 .66.110.73 ; timeout 300 ; retry 60 ; Reboot the operating system to enable the change. You should see the Enclave name server prepended to the top of /etc/resolv.conf Important: 100.66.110.73 is not the address of your local Enclave name server. Find your system's virtual address by running enclave status and look for the virtual address under local identity. Alternatively use ip addr . Ubuntu 16.04 (resolvconf) By default, Ubuntu 16.04 uses resolvconf to manage the contents of /etc/resolv.conf . To add the local Enclave name server to the search order, add the local Enclave virtual address using the nameserver directive in /etc/resolvconf/resolv.conf.d/head # Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8) # DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN nameserver 100 .66.110.73 Reload resolvconf to run the update scripts and apply the changes: sudo resolvconf -u Important: 100.66.110.73 is not the address of your local Enclave name server. Find your system's virtual address by running enclave status and look for the virtual address under local identity. Alternatively use ifconfig . Ubuntu 18.04 and higher (systemd-resolved) By default, Ubuntu 18.04 uses systemd-resolved to manage the contents of /etc/resolv.conf and configures the system to use an internal DNS stub resolver for DNS queries by setting the nameserver in /etc/resolv.conf to 127.0.0.53 . In order to add the local Enclave name server to the Global search order, add the local Enclave virtual address using the DNS directive in /etc/systemd/resolved.conf [ Resolve ] DNS = 100 .66.110.73 Restart the service ubuntu@localhost:~$ sudo systemctl restart systemd-resolved Important: 100.66.110.73 is not the address of your local Enclave name server. Find your system's virtual address by running enclave status and look for the virtual address under local identity. Alternatively use ip addr . Important: If after setting the DNS=100.66.110.73 in /etc/systemd/resolved.conf you find that name resolution fails with the message Name or service not known check that /etc/resolv.conf correctly points to the local systemd-resolved DNS stub resolver address 127.0.0.53 and that the systemd-resolved stub resolver service is running. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"How to configure dns forwarding on linux"},{"location":"kb/how-to-configure-dns-forwarding-on-linux/#how-to-configure-dns-forwarding-on-linux","text":"This page only applies if you're running Enclave on Linux. Under Windows and macOS Enclave automatically manages the local name server search order. Enclave runs a local name server bound to the virtual network IP address of each profile. By default this service runs on port 53 and answers queries for names inside the .enclave. zone. By enabling DNS forwarding and including the local Enclave name server in the search order of your operating system's name server list, you can reference and connect to peers by name. The local Enclave name server will resolve peers both by their peer description (for example where the peer V8Z4Y is described as primary.redis.service.lon then it will be resolvable as either primary.redis.service.lon.enclave or V8Z4Y.enclave ). Any spaces in a peer's description field are treated as equivalent to hyphens, so a peer with the descriptions of either home laptop or home-laptop is resolved to its Enclave IP address with the DNS query home-laptop.enclave . DNS resolution of a peer with the description primary.redis.service.lon using Dig: [centos@localhost ~]$ dig @100.105.173.218 primary.redis.service.lon.enclave A ; <<>> DiG 9.11.4-P2-RedHat-9.11.4-9.P2.el7 <<>> @100.105.173.218 primary.redis.service.lon.enclave A ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 46433 ;; flags: qr rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0 ;; WARNING: recursion requested but not available ;; QUESTION SECTION: ;primary.redis.service.lon.enclave. IN A ;; ANSWER SECTION: primary.redis.service.lon.enclave. 0 IN A 100.70.181.144 ;; Query time: 2 msec ;; SERVER: 100.105.173.218#53(100.105.173.218) ;; WHEN: Thu Sep 26 14:50:03 UTC 2019 ;; MSG SIZE rcvd: 67 Pinging a peer using its description primary.redis.service.lon as the hostname: [ centos@localhost ~ ] $ ping primary.redis.service.lon.enclave PING primary.redis.service.lon.enclave ( 100 .70.181.144 ) 56 ( 84 ) bytes of data. 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 1 ttl = 64 time = 0 .881 ms 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 2 ttl = 64 time = 0 .985 ms 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 3 ttl = 64 time = 0 .901 ms 64 bytes from 100 .70.181.144 ( 100 .70.181.144 ) : icmp_seq = 4 ttl = 64 time = 0 .882 ms --- primary.redis.service.lon.enclave ping statistics --- 4 packets transmitted, 4 received, 0 % packet loss, time 3003ms rtt min/avg/max/mdev = 0 .881/0.912/0.985/0.047 ms Key Principle: Enclave will not resolve queries for anything outside of the .enclave. zone, and will respond to such questions with SRVFAIL allowing the other name servers to answer the query. Security Note: The local Enclave name server will not respond to queries from connected peers despite listening on port 53 of the virtual network interface ip address. The name server will only reply to queries which originated from the local system.","title":"How to configure DNS forwarding on Linux"},{"location":"kb/how-to-configure-dns-forwarding-on-linux/#centos-7-dhclient","text":"By default, the /etc/resolv.conf file is configured in CentOS by /usr/sbin/dhclient-script . To add the local Enclave name server to the search list it must be added to /etc/dhcp/dhclient.conf using the prepend option. # add local Enclave name server to search order prepend domain-name-servers 100 .66.110.73 ; timeout 300 ; retry 60 ; Reboot the operating system to enable the change. You should see the Enclave name server prepended to the top of /etc/resolv.conf Important: 100.66.110.73 is not the address of your local Enclave name server. Find your system's virtual address by running enclave status and look for the virtual address under local identity. Alternatively use ip addr .","title":"CentOS 7 (dhclient)"},{"location":"kb/how-to-configure-dns-forwarding-on-linux/#ubuntu-1604-resolvconf","text":"By default, Ubuntu 16.04 uses resolvconf to manage the contents of /etc/resolv.conf . To add the local Enclave name server to the search order, add the local Enclave virtual address using the nameserver directive in /etc/resolvconf/resolv.conf.d/head # Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8) # DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN nameserver 100 .66.110.73 Reload resolvconf to run the update scripts and apply the changes: sudo resolvconf -u Important: 100.66.110.73 is not the address of your local Enclave name server. Find your system's virtual address by running enclave status and look for the virtual address under local identity. Alternatively use ifconfig .","title":"Ubuntu 16.04 (resolvconf)"},{"location":"kb/how-to-configure-dns-forwarding-on-linux/#ubuntu-1804-and-higher-systemd-resolved","text":"By default, Ubuntu 18.04 uses systemd-resolved to manage the contents of /etc/resolv.conf and configures the system to use an internal DNS stub resolver for DNS queries by setting the nameserver in /etc/resolv.conf to 127.0.0.53 . In order to add the local Enclave name server to the Global search order, add the local Enclave virtual address using the DNS directive in /etc/systemd/resolved.conf [ Resolve ] DNS = 100 .66.110.73 Restart the service ubuntu@localhost:~$ sudo systemctl restart systemd-resolved Important: 100.66.110.73 is not the address of your local Enclave name server. Find your system's virtual address by running enclave status and look for the virtual address under local identity. Alternatively use ip addr . Important: If after setting the DNS=100.66.110.73 in /etc/systemd/resolved.conf you find that name resolution fails with the message Name or service not known check that /etc/resolv.conf correctly points to the local systemd-resolved DNS stub resolver address 127.0.0.53 and that the systemd-resolved stub resolver service is running. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Ubuntu 18.04 and higher (systemd-resolved)"},{"location":"kb/transfer-ownership/","text":"Documentation / Knowledge Base How to transfer organisation ownership to another account For help transferring ownership of your organisation to another Enclave account, please contact support@enclave.io . Last updated Aug 19, 2021","title":"Transfer ownership"},{"location":"kb/transfer-ownership/#how-to-transfer-organisation-ownership-to-another-account","text":"For help transferring ownership of your organisation to another Enclave account, please contact support@enclave.io . Last updated Aug 19, 2021","title":"How to transfer organisation ownership to another account"},{"location":"kb/what-are-100.64.x.x-ip-addresses/","text":"Documentation / Knowledge Base What are the 100.64.x.x IP addresses Each system or device running an Enclave overlay network requires at last one unique IP address in order to participate in that network and communicate with other Enclave peers. That IP address should; not conflict with any other IP address, subnet or route which that system may come into contact with during its lifetime and, is typically static during the lifetime of that system (no matter where it moves in the physical world). These requirements make it difficult to reliably use IP addresses from the RFC1918 range without an organisation first checking to ensure no pre-existing address allocations would overlap and also commit to ensuring future developments of the underlay IP network would not conflict with addressing in the Enclave overlay IP network. Private networks and RFC 1918 While all IP addresses are technically routable, including those listed in used in private networks, RFC1918 defines several blocks of IPv4 address space which is intended for private-use networking only. As such, RFC1918 ranges are often referred to non-routable as they are not meant to be reachable from the public Internet, and carriers will avoid publishing routes for those ranges. 10.0.0.0/8 (255.0.0.0) \u2014 [10.0.0.0 \u2013 10.255.255.255] \u2014 16,777,216 addresses 172.16.0.0/12 (255.240.0.0) \u2014 [172.16.0.0 \u2013 172.31.255.255] \u2014 1,048,576 addresses 192.168.0.0/16 (255.255.0.0) \u2014 192.168.0.0 \u2013 192.168.255.255 \u2014 65,536 addresses Almost every private network on earth has devices assigned IP addresses from one, or more of those ranges, so the potential for conflict is extremely high. Indeed, network operators must take care to ensure that different parts of their aggregate address space do not overlap or conflict to avoid connectivity challenges. Carrier Grade NAT (CGNAT) IANA has reserved another prefix which is far less commonly deployed, 100.64.0.0/10 . Defined by RFC6598 (IANA-Reserved IPv4 Prefix for Shared Address Space) Carrier Grade NAT is expressly reserved as a range that does not conflict with either the private network address ranges defined by RFC1918 or the public Internet ranges assigned to the Regional Internet Registries by IANA . 100.64.0.0/10 (255.192.0.0) \u2014 [100.64.0.0 - 100.127.255.255] \u2014 4,194,304 addresses As this range is reserved for carriers and ISP, never exposed either to the customer side of the carrier's network, or the public Internet. As such the CGNAT range meets all of the criteria we require from a network IP address in an overlay network: The CGNAT range is not to be used on private networks, so non-conflicting with 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16. The CGNAT range is not to be used on the public Internet, so non-conflicting with routable networks. The CGNAT range is large enough to accommodate private networks where up to 4 million devices may co-exist without IP addresse conflicts. Have a set of well defined and universally recognised constraints which allow their safe re-use within organisations. 100.64.0.0/10 100.64.0.0/10 by default, but configurable. Enclave will assign each participating host, device or system with an IP address from the 100.64.0.0/10 range, but Enclave can be configured to use ANY IPv4 address allowing incredible flexibility when during migrations, consolidation and when working with esoteric and inflexible underlay networks. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"What are 100.64.x.x ip addresses"},{"location":"kb/what-are-100.64.x.x-ip-addresses/#what-are-the-10064xx-ip-addresses","text":"Each system or device running an Enclave overlay network requires at last one unique IP address in order to participate in that network and communicate with other Enclave peers. That IP address should; not conflict with any other IP address, subnet or route which that system may come into contact with during its lifetime and, is typically static during the lifetime of that system (no matter where it moves in the physical world). These requirements make it difficult to reliably use IP addresses from the RFC1918 range without an organisation first checking to ensure no pre-existing address allocations would overlap and also commit to ensuring future developments of the underlay IP network would not conflict with addressing in the Enclave overlay IP network.","title":"What are the 100.64.x.x IP addresses"},{"location":"kb/what-are-100.64.x.x-ip-addresses/#private-networks-and-rfc-1918","text":"While all IP addresses are technically routable, including those listed in used in private networks, RFC1918 defines several blocks of IPv4 address space which is intended for private-use networking only. As such, RFC1918 ranges are often referred to non-routable as they are not meant to be reachable from the public Internet, and carriers will avoid publishing routes for those ranges. 10.0.0.0/8 (255.0.0.0) \u2014 [10.0.0.0 \u2013 10.255.255.255] \u2014 16,777,216 addresses 172.16.0.0/12 (255.240.0.0) \u2014 [172.16.0.0 \u2013 172.31.255.255] \u2014 1,048,576 addresses 192.168.0.0/16 (255.255.0.0) \u2014 192.168.0.0 \u2013 192.168.255.255 \u2014 65,536 addresses Almost every private network on earth has devices assigned IP addresses from one, or more of those ranges, so the potential for conflict is extremely high. Indeed, network operators must take care to ensure that different parts of their aggregate address space do not overlap or conflict to avoid connectivity challenges.","title":"Private networks and RFC 1918"},{"location":"kb/what-are-100.64.x.x-ip-addresses/#carrier-grade-nat-cgnat","text":"IANA has reserved another prefix which is far less commonly deployed, 100.64.0.0/10 . Defined by RFC6598 (IANA-Reserved IPv4 Prefix for Shared Address Space) Carrier Grade NAT is expressly reserved as a range that does not conflict with either the private network address ranges defined by RFC1918 or the public Internet ranges assigned to the Regional Internet Registries by IANA . 100.64.0.0/10 (255.192.0.0) \u2014 [100.64.0.0 - 100.127.255.255] \u2014 4,194,304 addresses As this range is reserved for carriers and ISP, never exposed either to the customer side of the carrier's network, or the public Internet. As such the CGNAT range meets all of the criteria we require from a network IP address in an overlay network: The CGNAT range is not to be used on private networks, so non-conflicting with 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16. The CGNAT range is not to be used on the public Internet, so non-conflicting with routable networks. The CGNAT range is large enough to accommodate private networks where up to 4 million devices may co-exist without IP addresse conflicts. Have a set of well defined and universally recognised constraints which allow their safe re-use within organisations.","title":"Carrier Grade NAT (CGNAT)"},{"location":"kb/what-are-100.64.x.x-ip-addresses/#100640010","text":"100.64.0.0/10 by default, but configurable. Enclave will assign each participating host, device or system with an IP address from the 100.64.0.0/10 range, but Enclave can be configured to use ANY IPv4 address allowing incredible flexibility when during migrations, consolidation and when working with esoteric and inflexible underlay networks. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"100.64.0.0/10"},{"location":"management/dns/","text":"DNS is the mechanism by which a name, e.g. myserver.enclave is resolved to an IP Address; in our case, an Enclave IP Address (e.g. 100.84.10.20 ). The Enclave DNS feature provides built-in DNS support for Enclave and allows you to define your own DNS names from a single central location in the portal or via our APIs. On each Enclave System, the installed agent runs a local authoritative DNS nameserver, bound to the local Enclave Virtual Adapter, that provides DNS services. On Windows and macOS, we automatically configure the operating system to use the Enclave nameserver. However on Linux you currently need to configure your DNS manually (because of the big variation in Linux DNS configurations). See our knowledge base article on how to configure DNS on Linux . Automatic ID Names When a System is enrolled, it is assigned a short, unique, System ID . This System ID is displayed in the System's detail view in the portal , in the Windows tray application, and when you run enclave status from the command line. All systems are automatically assigned a name based on their System ID, {systemId}.id.enclave . So, as an example, if a system has the id 488Q , it will always have the DNS name 488q.id.enclave . Adding a DNS Record To create a custom DNS record, go to your DNS settings in the portal . Organisations on our Business Plan can create additional custom DNS Zones in addition to the default enclave zone. See the section below on custom DNS zones for more info. To create a new DNS record, click \"Create New Record\"; then specify the hostname you want. You will get a preview of the fully-qualified domain name (FQDN) as you type. Hostnames can only contain alphanumeric characters (A-Z,0-9), hyphens, and a period character to separate sections of the name. You can also enter the special '@' character on its own to create an apex record , which creates a record with the name of the zone. Adding Targets There are two ways to specify which systems should be resolved for a given DNS name. The first is using Tags . You can specify a list of tags for the hostname. Any system with one of the specified tags will be resolvable from the name you defined. The second is by specifying exactly the systems you wish to resolve with that name. In general, we suggest attaching DNS names by tag if you can, because it is less brittle, and easy to replace the System that provides a given application or service without updating the DNS record. You can combine tag and system targeting on a single DNS record. Viewing Names applied to a System In the Detail pane of each System in your Organisation, there is the full list of all names currently applied to the system, as well as an indication as to how that system got the name (via a system or tags assignment). DNS Load Balancing If more than system has a given name assigned to it, either directly, or because of a tag, then implicit DNS load balancing kicks in. If a System resolves a name with multiple systems assigned to it, it will randomly resolve to one of the systems it is connected to with that name. That last point about being connected to the system is important, because it means you can also set up geographically segmented networks that resolve a different System IP Address based on the policies in place for the System, all from the same DNS name. Why no TTL? DNS changes you make in the portal are propagated immediately to every impacted system, without any need to specify a Time-To- Live for the record. You don't need to worry about systems getting out of sync with regards to what names they understand. Custom Zones (Business Plan) Every organisation has a default enclave zone pre-defined, to which you can add as many DNS records as you wish, but they will all have the .enclave suffix on your names. Organisations on our Business Plan (see pricing ) can also create any number of custom zones, with any TLD they wish. You can use this feature to help organise your DNS names, or create names that match certificates issued for existing publicly-managed names. Renaming Zones You can rename a custom zone after creating it. This will update the FQDN (fully-qualified domain name) of all records inside the zone to respect the new FQDN. Changing a zone's name will immediately change all of the DNS names on that zone from the perspective of client systems, so make sure you understand what systems might need to be reconfigured after the change. Note, you will not be able to rename a zone if the new name results in record FQDN clashes with names in an existing zone.","title":"DNS"},{"location":"management/dns/#automatic-id-names","text":"When a System is enrolled, it is assigned a short, unique, System ID . This System ID is displayed in the System's detail view in the portal , in the Windows tray application, and when you run enclave status from the command line. All systems are automatically assigned a name based on their System ID, {systemId}.id.enclave . So, as an example, if a system has the id 488Q , it will always have the DNS name 488q.id.enclave .","title":"Automatic ID Names"},{"location":"management/dns/#adding-a-dns-record","text":"To create a custom DNS record, go to your DNS settings in the portal . Organisations on our Business Plan can create additional custom DNS Zones in addition to the default enclave zone. See the section below on custom DNS zones for more info. To create a new DNS record, click \"Create New Record\"; then specify the hostname you want. You will get a preview of the fully-qualified domain name (FQDN) as you type. Hostnames can only contain alphanumeric characters (A-Z,0-9), hyphens, and a period character to separate sections of the name. You can also enter the special '@' character on its own to create an apex record , which creates a record with the name of the zone.","title":"Adding a DNS Record"},{"location":"management/dns/#adding-targets","text":"There are two ways to specify which systems should be resolved for a given DNS name. The first is using Tags . You can specify a list of tags for the hostname. Any system with one of the specified tags will be resolvable from the name you defined. The second is by specifying exactly the systems you wish to resolve with that name. In general, we suggest attaching DNS names by tag if you can, because it is less brittle, and easy to replace the System that provides a given application or service without updating the DNS record. You can combine tag and system targeting on a single DNS record.","title":"Adding Targets"},{"location":"management/dns/#viewing-names-applied-to-a-system","text":"In the Detail pane of each System in your Organisation, there is the full list of all names currently applied to the system, as well as an indication as to how that system got the name (via a system or tags assignment).","title":"Viewing Names applied to a System"},{"location":"management/dns/#dns-load-balancing","text":"If more than system has a given name assigned to it, either directly, or because of a tag, then implicit DNS load balancing kicks in. If a System resolves a name with multiple systems assigned to it, it will randomly resolve to one of the systems it is connected to with that name. That last point about being connected to the system is important, because it means you can also set up geographically segmented networks that resolve a different System IP Address based on the policies in place for the System, all from the same DNS name.","title":"DNS Load Balancing"},{"location":"management/dns/#why-no-ttl","text":"DNS changes you make in the portal are propagated immediately to every impacted system, without any need to specify a Time-To- Live for the record. You don't need to worry about systems getting out of sync with regards to what names they understand.","title":"Why no TTL?"},{"location":"management/dns/#custom-zones-business-plan","text":"Every organisation has a default enclave zone pre-defined, to which you can add as many DNS records as you wish, but they will all have the .enclave suffix on your names. Organisations on our Business Plan (see pricing ) can also create any number of custom zones, with any TLD they wish. You can use this feature to help organise your DNS names, or create names that match certificates issued for existing publicly-managed names.","title":"Custom Zones (Business Plan)"},{"location":"management/dns/#renaming-zones","text":"You can rename a custom zone after creating it. This will update the FQDN (fully-qualified domain name) of all records inside the zone to respect the new FQDN. Changing a zone's name will immediately change all of the DNS names on that zone from the perspective of client systems, so make sure you understand what systems might need to be reconfigured after the change. Note, you will not be able to rename a zone if the new name results in record FQDN clashes with names in an existing zone.","title":"Renaming Zones"},{"location":"management/endpoint-management/","text":"Systems registered with Enclave can either be locally managed (by the end-users of those systems), or they can be centrally managed using tags and policy controls defined in the Portal. There are quick start guides for both options, but we recommend most new users start by enrolling systems using centralised management with tags & policy . Any enrolled system can be easily switched between locally, or centrally managed modes at any time simply by adding, or removing tags in the Portal. If a Portal Administrator adds tags to an enrolled system, it automatically becomes centrally controlled. If a Portal Administrator removes all of the tags from a particular system, Enclave will allow the end-user(s) to manage connectivity. Tags & Policy When an enrolled system is assigned tags Enclave will treat it as centrally managed; end-users of that system cannot control Enclave. Managed systems allow organisations to centrally define policy and apply oversight, consistency and control as networks grow in size and complexity. Best for teams, businesses and commercial users. Enrol with tags & policy Locally Managed When an enrolled system is not assigned any tags Enclave will treat it as locally managed; end-users of that system will be able control Enclave. Locally managed systems are used for quick, ad-hoc connectivity to other enrolled systems where oversight and centralised control are less important. Best for small scale home, hobbyist or solo users. Enrol a locally managed system","title":"Endpoint management"},{"location":"management/enrolment/","text":"","title":"Enrolment"},{"location":"management/examples/","text":"","title":"Examples"},{"location":"management/organisations/","text":"how you arrange and manage separate from how you put services on top of it","title":"Organisations"},{"location":"management/policy/","text":"Policies allow Administrators to centrally define which Managed systems in their account should be connected to one another and under what conditions. Production use: Changes to policies take effect immediately and Enclave will quickly build direct connectivity between enrolled systems impacted by each Policy. Access control Each Policy is composed of Tags which are assigned to one of two roles: a Sender role and a Receiver role. Traditional firewalls are often configured to permit outbound traffic but block all inbound or unsolicited traffic. In much the same way, Enclave will allow systems in the Sender role to originate traffic to systems in the Receiver role but not the reverse. Systems are grouped together under common Tags and Tags are attached to Policies. As an example, consider the following policy: Policy Name Sender Tags Receiver Tags Kubernetes access developers contractors kubernetes-pods Any system which is a member of either the developers or contractors Tags will be connected to any system in the kubernetes-pods Tag, but systems in the developers Tag will not be connected to other developers or contractors by this Policy. Systems in the kubernetes-pods Tag will be unable to initiate outbound connections to developers or contractors systems, as the Receiver role prohibits unsolicited traffic and only allows responses to traffic which originated from a system with the Sender role. Unlike the public Internet, without an Enclave connection in place between two peers, no traffic can be send across an Enclave link; this means access controls can be exclusively Receiver defined. There is no way to apply sender-side restrictions to an Enclave peer to prohibit what can or can't be sent to other peers, all access controls are applied by the Receiver and govern what each system is willing to accept. Depending on how Administrators arrange Tags in each a Policy they may create either partially connected or fully connected mesh topologies. Naming The Enclave access control model is defined by the Receiver role of each Policy, so Policy names should normally reflect the resource accessed and consumer(s) in an X for Y pattern. For example if a Policy defines access to a GitLab server for Developers, naming the policy GitLab for Developers provides a clear and concise description. Separate policies may grant access to the same resource or set of resources. For example, one Policy may grant Developers to access Database Servers during working hours and a separate policy may grant the Site Reliability Engineering (SRE) team 24/7 access to the same Database Servers. Database Servers for Developers Database Servers for SRE Topology Connectivity is established between the systems with membership in Tags attached on the Sender and Receiver side, but never between systems on the same side. Partially connected mesh In a partially connected mesh, only specific systems connect to one another across the policy. This assumes that no systems belong to Tags on multiple sides of the Policy. Policy Name Sender Tags Receiver Tags Server access for Workstations workstations servers Fully connected mesh Full mesh connectivity arises when multiple systems are members of Tags on both sides of a Policy, all affected systems are connected to one another. In the following example a Policy defines connectivity between systems tagged with the servers Tag. Policy Name Sender Tags Receiver Tags Servers full mesh servers servers Fully connected mesh networks may create large numbers of connections between participating systems. The number of connections in a fully connected mesh is equal to N\u2217(N\u22121)/2 (i.e. number of systems times the number of systems minus 1, divided by 2). A fully connected mesh of 16 systems will create 120 connections, where as a mesh twice the size with 32 participants will create 496 connections. You should consider the capabilities of your underlying network infrastructure when deploying a fully connected mesh as some stateful network appliances impose limits on the maximum number of connections they can track or support.","title":"Policy"},{"location":"management/policy/#access-control","text":"Each Policy is composed of Tags which are assigned to one of two roles: a Sender role and a Receiver role. Traditional firewalls are often configured to permit outbound traffic but block all inbound or unsolicited traffic. In much the same way, Enclave will allow systems in the Sender role to originate traffic to systems in the Receiver role but not the reverse. Systems are grouped together under common Tags and Tags are attached to Policies. As an example, consider the following policy: Policy Name Sender Tags Receiver Tags Kubernetes access developers contractors kubernetes-pods Any system which is a member of either the developers or contractors Tags will be connected to any system in the kubernetes-pods Tag, but systems in the developers Tag will not be connected to other developers or contractors by this Policy. Systems in the kubernetes-pods Tag will be unable to initiate outbound connections to developers or contractors systems, as the Receiver role prohibits unsolicited traffic and only allows responses to traffic which originated from a system with the Sender role. Unlike the public Internet, without an Enclave connection in place between two peers, no traffic can be send across an Enclave link; this means access controls can be exclusively Receiver defined. There is no way to apply sender-side restrictions to an Enclave peer to prohibit what can or can't be sent to other peers, all access controls are applied by the Receiver and govern what each system is willing to accept. Depending on how Administrators arrange Tags in each a Policy they may create either partially connected or fully connected mesh topologies.","title":"Access control"},{"location":"management/policy/#naming","text":"The Enclave access control model is defined by the Receiver role of each Policy, so Policy names should normally reflect the resource accessed and consumer(s) in an X for Y pattern. For example if a Policy defines access to a GitLab server for Developers, naming the policy GitLab for Developers provides a clear and concise description. Separate policies may grant access to the same resource or set of resources. For example, one Policy may grant Developers to access Database Servers during working hours and a separate policy may grant the Site Reliability Engineering (SRE) team 24/7 access to the same Database Servers. Database Servers for Developers Database Servers for SRE","title":"Naming"},{"location":"management/policy/#topology","text":"Connectivity is established between the systems with membership in Tags attached on the Sender and Receiver side, but never between systems on the same side.","title":"Topology"},{"location":"management/policy/#partially-connected-mesh","text":"In a partially connected mesh, only specific systems connect to one another across the policy. This assumes that no systems belong to Tags on multiple sides of the Policy. Policy Name Sender Tags Receiver Tags Server access for Workstations workstations servers","title":"Partially connected mesh"},{"location":"management/policy/#fully-connected-mesh","text":"Full mesh connectivity arises when multiple systems are members of Tags on both sides of a Policy, all affected systems are connected to one another. In the following example a Policy defines connectivity between systems tagged with the servers Tag. Policy Name Sender Tags Receiver Tags Servers full mesh servers servers Fully connected mesh networks may create large numbers of connections between participating systems. The number of connections in a fully connected mesh is equal to N\u2217(N\u22121)/2 (i.e. number of systems times the number of systems minus 1, divided by 2). A fully connected mesh of 16 systems will create 120 connections, where as a mesh twice the size with 32 participants will create 496 connections. You should consider the capabilities of your underlying network infrastructure when deploying a fully connected mesh as some stateful network appliances impose limits on the maximum number of connections they can track or support.","title":"Fully connected mesh"},{"location":"management/profiles/","text":"","title":"Profiles"},{"location":"management/tags/","text":"Tags are free-form text labels attached to one or more systems in your account which allow administrators to group systems together which share similar characteristics (i.e. business unit, security level or function) in order to build connectivity between them. Tags can be manually added to enrolled systems, or an Enrolment Key can be configured to apply an initial set of Tags to new systems as they enrol to your account. Usage Tags form the building blocks of policies and policies define connectivity between enrolled systems. Instead of directly attaching systems to a Policy, Administrators use Tags to freely group enrolled systems together which can be referenced once across many policies. The decoupling which Tags provide allows policies to be defined once and remain static, while the business shifts and evolves underneath. For example, if an Administrator creates a developers Tag and a kubernetes-pods Tag, and then defines a Kubernetes access Policy which allows developers direct access to kubernetes-pods ; then systems in the developers Tag can change over time, so can members of the kubernetes-pods Tag as new instances are spun up and old instances are shutdown. The policy however (the business intent underpinning connectivity between those groups) remains in-place, constant and unchanged. Managed vs. unmanaged systems: When one or more Tags are attached to a system, that system automatically switches into Managed mode. This means all connectivity for that system must be defined by Policy and that the Enclave software on that system will no longer accept commands from the local user(s). Conversely, if no Tags are attached to a system then the opposite is true; the system enters Unmanaged mode and users are able to configure and control the Enclave software locally. Naming conventions It is considered best practice to define a naming pattern which reflects the structure and security model of your organisation, and group systems along those lines when defining Tags. A valid Tag name is composed of lower-case characters ( a-z and 0-9 without spaces) and may be up to 64 characters long. Valid separator characters include - and . Tags names should be made up of designators which represent your organisational structure. Consider designations for your organisation which group systems: By user geography: uk , london or nyc-office By business unit: developers , sales or marketing By security level: staging , production or uat By function: webservers , database-servers or intranet By infrastructure: aws-eu-west-2 or dc-lax-11 By project: us-gov or f22-raptor You may also decide to combine multiple designations into a single Tag. We suggest using the period character . to include multiple designations as part of a single Tag name, with the most specific designator placed last. f22-raptor.rapid-prototype-team nyc-office.developers aws-eu-west-2.production.webservers dc-lax-11.intranet uk.laptops uk.laptops.developers all-staff contractors Once defined, account Administrators can add member systems to Tags and compose Policies to create connectivity. Policy Name Sender Tags Receiver Tags Access to Jira all-staff contractors dc-lax-11.jira Access to preprod db uk.laptops.developers nyc-office.developers aws-eu-west-2.staging.db-servers aws-eu-west-2.uat.db-servers R22 prototype team f22-raptor.rapid-prototype-team f22-raptor.rapid-prototype-team Note: When the same Tag is applied to both the Sender and Receiver sides of the same policy Enclave will create connectivity between that Tag's member systems. In this case, forming a fully connected mesh and community of interest between members of the f22-raptor.rapid-prototype-team Tag. You should consider the capabilities of your underlying network infrastructure when deploying a fully connected mesh. Learn more .","title":"Tags"},{"location":"management/tags/#usage","text":"Tags form the building blocks of policies and policies define connectivity between enrolled systems. Instead of directly attaching systems to a Policy, Administrators use Tags to freely group enrolled systems together which can be referenced once across many policies. The decoupling which Tags provide allows policies to be defined once and remain static, while the business shifts and evolves underneath. For example, if an Administrator creates a developers Tag and a kubernetes-pods Tag, and then defines a Kubernetes access Policy which allows developers direct access to kubernetes-pods ; then systems in the developers Tag can change over time, so can members of the kubernetes-pods Tag as new instances are spun up and old instances are shutdown. The policy however (the business intent underpinning connectivity between those groups) remains in-place, constant and unchanged. Managed vs. unmanaged systems: When one or more Tags are attached to a system, that system automatically switches into Managed mode. This means all connectivity for that system must be defined by Policy and that the Enclave software on that system will no longer accept commands from the local user(s). Conversely, if no Tags are attached to a system then the opposite is true; the system enters Unmanaged mode and users are able to configure and control the Enclave software locally.","title":"Usage"},{"location":"management/tags/#naming-conventions","text":"It is considered best practice to define a naming pattern which reflects the structure and security model of your organisation, and group systems along those lines when defining Tags. A valid Tag name is composed of lower-case characters ( a-z and 0-9 without spaces) and may be up to 64 characters long. Valid separator characters include - and . Tags names should be made up of designators which represent your organisational structure. Consider designations for your organisation which group systems: By user geography: uk , london or nyc-office By business unit: developers , sales or marketing By security level: staging , production or uat By function: webservers , database-servers or intranet By infrastructure: aws-eu-west-2 or dc-lax-11 By project: us-gov or f22-raptor You may also decide to combine multiple designations into a single Tag. We suggest using the period character . to include multiple designations as part of a single Tag name, with the most specific designator placed last. f22-raptor.rapid-prototype-team nyc-office.developers aws-eu-west-2.production.webservers dc-lax-11.intranet uk.laptops uk.laptops.developers all-staff contractors Once defined, account Administrators can add member systems to Tags and compose Policies to create connectivity. Policy Name Sender Tags Receiver Tags Access to Jira all-staff contractors dc-lax-11.jira Access to preprod db uk.laptops.developers nyc-office.developers aws-eu-west-2.staging.db-servers aws-eu-west-2.uat.db-servers R22 prototype team f22-raptor.rapid-prototype-team f22-raptor.rapid-prototype-team Note: When the same Tag is applied to both the Sender and Receiver sides of the same policy Enclave will create connectivity between that Tag's member systems. In this case, forming a fully connected mesh and community of interest between members of the f22-raptor.rapid-prototype-team Tag. You should consider the capabilities of your underlying network infrastructure when deploying a fully connected mesh. Learn more .","title":"Naming conventions"},{"location":"networking/arp/","text":"","title":"Arp"},{"location":"networking/dns/","text":"","title":"Dns"},{"location":"networking/ip-addresses/","text":"","title":"Ip addresses"},{"location":"networking/multicast/","text":"","title":"Multicast"},{"location":"networking/topologies/","text":"","title":"Topologies"},{"location":"setup/containers/","text":"Containers Installation Docker Create a docker-compose.yml file: version : '3.1' services : enclave-fabric : container_name : fabric image : enclavenetworks/enclave:latest restart : always cap_add : - NET_ADMIN devices : - /dev/net/tun environment : ENCLAVE_ENROLMENT_KEY : XXXXX-XXXXX-XXXXX-XXXXX-XXXXX volumes : - enclave-config:/etc/enclave/profiles - enclave-logs:/var/log/enclave volumes : enclave-config : enclave-logs : Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Default Enrolment Key Bring the container up using docker-compose up -d Verify Enclave is running insider the container with docker exec fabric enclave status Kubernetes Add the enclave-sidecar to your pod yaml file under the containers: section. For example, if your pod contains an nginx container: spec : containers : - name : nginx-container image : nginx:1.7.9 ports : - containerPort : 80 Add the enclave-sidecar definition to below your existing pod: spec : containers : - name : nginx-container ... - name : enclave-sidecar image : enclavenetworks/enclave:latest env : - name : \"ENCLAVE_ENROLMENT_KEY\" value : \"XXXXX-XXXXX-XXXXX-XXXXX-XXXXX\" securityContext : capabilities : add : [ 'NET_ADMIN' ] volumeMounts : - name : tun mountPath : /dev/net/tun volumes : - name : tun hostPath : type : 'CharDevice' path : /dev/net/tun See pod.yaml for a complete example. Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Default Enrolment Key Push your changes to the cluster using kubectl apply or your preferred method What to do if the install fails For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages. If your installation fails and you are unable to resolve the problem by retrying, please contact support@enclave.io .","title":"Containers"},{"location":"setup/containers/#containers","text":"","title":"Containers"},{"location":"setup/containers/#installation","text":"Docker Create a docker-compose.yml file: version : '3.1' services : enclave-fabric : container_name : fabric image : enclavenetworks/enclave:latest restart : always cap_add : - NET_ADMIN devices : - /dev/net/tun environment : ENCLAVE_ENROLMENT_KEY : XXXXX-XXXXX-XXXXX-XXXXX-XXXXX volumes : - enclave-config:/etc/enclave/profiles - enclave-logs:/var/log/enclave volumes : enclave-config : enclave-logs : Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Default Enrolment Key Bring the container up using docker-compose up -d Verify Enclave is running insider the container with docker exec fabric enclave status Kubernetes Add the enclave-sidecar to your pod yaml file under the containers: section. For example, if your pod contains an nginx container: spec : containers : - name : nginx-container image : nginx:1.7.9 ports : - containerPort : 80 Add the enclave-sidecar definition to below your existing pod: spec : containers : - name : nginx-container ... - name : enclave-sidecar image : enclavenetworks/enclave:latest env : - name : \"ENCLAVE_ENROLMENT_KEY\" value : \"XXXXX-XXXXX-XXXXX-XXXXX-XXXXX\" securityContext : capabilities : add : [ 'NET_ADMIN' ] volumeMounts : - name : tun mountPath : /dev/net/tun volumes : - name : tun hostPath : type : 'CharDevice' path : /dev/net/tun See pod.yaml for a complete example. Replace XXXXX-XXXXX-XXXXX-XXXXX-XXXXX with your Default Enrolment Key Push your changes to the cluster using kubectl apply or your preferred method","title":"Installation"},{"location":"setup/containers/#what-to-do-if-the-install-fails","text":"For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages. If your installation fails and you are unable to resolve the problem by retrying, please contact support@enclave.io .","title":"What to do if the install fails"},{"location":"setup/linux/","text":"Linux Installation Ubuntu / Debian Requires at least Ubuntu 14.04 LTS or Debian 9. Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Default Enrolment Key to complete the installation CentOS / RHEL Requires at least CentOS 7.6 or RHEL 7. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Fedora Requires at least Fedora 32. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Amazon Linux Requires at least Amazon Linux 2018.03. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Arch Linux Requires at least Arch Linux 2020.08.01. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Raspbian Requires at least Raspbian 10 (buster). Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Default Enrolment Key to complete the installation Unattended installation Enclave supports unattended installations by setting the Enrolment Key in a specially named environment variable: ENCLAVE_ENROLMENT_KEY . Set the Enrolment Key you want to use as an environment variable $ export ENCLAVE_ENROLMENT_KEY=XXXXX-XXXXX-XXXXX-XXXXX-XXXXX Enrol the system using enclave enrol . If you're using sudo don't forget to include the -E argument (also --preserve-env ) to preserve environment variables. $ sudo -E enclave enrol Enclave will automatically enrol and daemonise as a background process. Starting and stopping Enclave The Enclave installer creates a lightweight supervisor service set to run at system start which is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as daemon child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric. Updating Enclave Ubuntu / Debian / Raspbian Enclave is updated using the standard apt package manager. sudo apt-get update && sudo apt-get upgrade Other OS Upgrade to the latest version of Enclave by running our quick-start script. bash <(curl -Ss https://install.enclave.io/setup.sh) Uninstalling Enclave Ubuntu / Debian / Raspbian Remove the Enclave package while leaving configuration files on the system. sudo apt-get remove enclave Remove the Enclave package and any configuration files (including private any keys generated during enrolment). sudo apt-get purge enclave Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled. What to do if the install fails If an install goes horribly wrong or is interrupted, try re-running the Enclave setup.sh script to restart the process. If your installation fails and you are unable to resolve the problem by retrying, please contact support@enclave.io . For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages.","title":"Linux"},{"location":"setup/linux/#linux","text":"","title":"Linux"},{"location":"setup/linux/#installation","text":"Ubuntu / Debian Requires at least Ubuntu 14.04 LTS or Debian 9. Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Default Enrolment Key to complete the installation CentOS / RHEL Requires at least CentOS 7.6 or RHEL 7. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Fedora Requires at least Fedora 32. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Amazon Linux Requires at least Amazon Linux 2018.03. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Arch Linux Requires at least Arch Linux 2020.08.01. Install Enclave using our quick-start script bash <(curl -Ss https://install.enclave.io/setup.sh) Provide your Default Enrolment Key to complete the installation Raspbian Requires at least Raspbian 10 (buster). Install apt-transport-https sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.stable.list sudo apt-get update Install Enclave. sudo apt-get install enclave Enrol sudo enclave enrol Provide your Default Enrolment Key to complete the installation","title":"Installation"},{"location":"setup/linux/#unattended-installation","text":"Enclave supports unattended installations by setting the Enrolment Key in a specially named environment variable: ENCLAVE_ENROLMENT_KEY . Set the Enrolment Key you want to use as an environment variable $ export ENCLAVE_ENROLMENT_KEY=XXXXX-XXXXX-XXXXX-XXXXX-XXXXX Enrol the system using enclave enrol . If you're using sudo don't forget to include the -E argument (also --preserve-env ) to preserve environment variables. $ sudo -E enclave enrol Enclave will automatically enrol and daemonise as a background process.","title":"Unattended installation"},{"location":"setup/linux/#starting-and-stopping-enclave","text":"The Enclave installer creates a lightweight supervisor service set to run at system start which is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as daemon child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric.","title":"Starting and stopping Enclave"},{"location":"setup/linux/#updating-enclave","text":"Ubuntu / Debian / Raspbian Enclave is updated using the standard apt package manager. sudo apt-get update && sudo apt-get upgrade Other OS Upgrade to the latest version of Enclave by running our quick-start script. bash <(curl -Ss https://install.enclave.io/setup.sh)","title":"Updating Enclave"},{"location":"setup/linux/#uninstalling-enclave","text":"Ubuntu / Debian / Raspbian Remove the Enclave package while leaving configuration files on the system. sudo apt-get remove enclave Remove the Enclave package and any configuration files (including private any keys generated during enrolment). sudo apt-get purge enclave Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled.","title":"Uninstalling Enclave"},{"location":"setup/linux/#what-to-do-if-the-install-fails","text":"If an install goes horribly wrong or is interrupted, try re-running the Enclave setup.sh script to restart the process. If your installation fails and you are unable to resolve the problem by retrying, please contact support@enclave.io . For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages.","title":"What to do if the install fails"},{"location":"setup/macos-zip/","text":"macOS Manual Download You can use a manual build of Enclave if you'd prefer to use Enclave as an interactive program rather than a background daemon. Download the latest version of Enclave: Download Enclave for macOS Zip Checksum ( loading ... ) ---------------------------------------------------------------- Extract the zip file, and open a terminal in the extracted directory. Enrol your system with your Enclave Organisation sudo enclave enrol You will be asked for a valid Enrolment Key from your Portal account. Enclave stores the generated private keys for your local Enclave identity in a way that prevents easy access without local admin privileges, which is why this command runs under sudo. Run enclave interactively sudo enclave run Depending on the type of enrolment key you used to enrol your new system, it might be held waiting for an Administrator to provide enrolment approval in your account Portal . Log in to authorise the enrolment of your new system if you need to, and configure additional options like DNS. You're all set! You've successfully enrolled a new system to your Enclave account. Starting and stopping Enclave If running interactively, you can launch Enclave with sudo enclave run . Press control+C to exit. Updating Enclave To update Enclave in 'Manual' mode, download the latest zip file and replace the existing folder. Your existing configuration will be preserved. Uninstalling Enclave To remove the Enclave software, just delete the folder you downloaded! This will remove the binaries from your system, but your Enclave configuration, private keys and log files will be left in-place. If you wish to fully clear Enclave from your system, run: sudo rm -R /etc/enclave sudo rm -R /var/log/enclave This will remove all configuration, private keys and log files from your system along with the Enclave binaries. Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled. fetch(\"https://install.enclave.io/manifest/osx.json\", { method: 'get' }) .then(response => response.json()) .then(jsonResult => { var latest = jsonResult.ReleaseVersions.reverse().find(releaseVersion => { return releaseVersion.ReleaseType === 'GA'; }); var url = latest?.Packages[0].Url; var hash = latest?.Packages[0].Hash; var hashAlg = latest?.Packages[0].HashAlg; document.getElementById(\"download-osx-manual\").href = url; document.getElementById(\"zip-url\").innerHTML = url; document.getElementById(\"hash-alg\").innerHTML = hashAlg.toLowerCase(); document.getElementById(\"checksum\").innerHTML = base64ToHex(hash); }) .catch(err => { console.log(err); document.getElementById(\"download-osx-manual\").href = \"https://portal.enclave.io/my/new-system\"; }); function base64ToHex(str) { const raw = atob(str); let result = ''; for (let i = 0; i < raw.length; i++) { const hex = raw.charCodeAt(i).toString(16); result += (hex.length === 2 ? hex : '0' + hex); } return result; }","title":"macOS Manual Download"},{"location":"setup/macos-zip/#macos-manual-download","text":"You can use a manual build of Enclave if you'd prefer to use Enclave as an interactive program rather than a background daemon. Download the latest version of Enclave: Download Enclave for macOS Zip Checksum ( loading ... ) ---------------------------------------------------------------- Extract the zip file, and open a terminal in the extracted directory. Enrol your system with your Enclave Organisation sudo enclave enrol You will be asked for a valid Enrolment Key from your Portal account. Enclave stores the generated private keys for your local Enclave identity in a way that prevents easy access without local admin privileges, which is why this command runs under sudo. Run enclave interactively sudo enclave run Depending on the type of enrolment key you used to enrol your new system, it might be held waiting for an Administrator to provide enrolment approval in your account Portal . Log in to authorise the enrolment of your new system if you need to, and configure additional options like DNS. You're all set! You've successfully enrolled a new system to your Enclave account.","title":"macOS Manual Download"},{"location":"setup/macos-zip/#starting-and-stopping-enclave","text":"If running interactively, you can launch Enclave with sudo enclave run . Press control+C to exit.","title":"Starting and stopping Enclave"},{"location":"setup/macos-zip/#updating-enclave","text":"To update Enclave in 'Manual' mode, download the latest zip file and replace the existing folder. Your existing configuration will be preserved.","title":"Updating Enclave"},{"location":"setup/macos-zip/#uninstalling-enclave","text":"To remove the Enclave software, just delete the folder you downloaded! This will remove the binaries from your system, but your Enclave configuration, private keys and log files will be left in-place. If you wish to fully clear Enclave from your system, run: sudo rm -R /etc/enclave sudo rm -R /var/log/enclave This will remove all configuration, private keys and log files from your system along with the Enclave binaries. Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled. fetch(\"https://install.enclave.io/manifest/osx.json\", { method: 'get' }) .then(response => response.json()) .then(jsonResult => { var latest = jsonResult.ReleaseVersions.reverse().find(releaseVersion => { return releaseVersion.ReleaseType === 'GA'; }); var url = latest?.Packages[0].Url; var hash = latest?.Packages[0].Hash; var hashAlg = latest?.Packages[0].HashAlg; document.getElementById(\"download-osx-manual\").href = url; document.getElementById(\"zip-url\").innerHTML = url; document.getElementById(\"hash-alg\").innerHTML = hashAlg.toLowerCase(); document.getElementById(\"checksum\").innerHTML = base64ToHex(hash); }) .catch(err => { console.log(err); document.getElementById(\"download-osx-manual\").href = \"https://portal.enclave.io/my/new-system\"; }); function base64ToHex(str) { const raw = atob(str); let result = ''; for (let i = 0; i < raw.length; i++) { const hex = raw.charCodeAt(i).toString(16); result += (hex.length === 2 ? hex : '0' + hex); } return result; }","title":"Uninstalling Enclave"},{"location":"setup/macos/","text":"macOS Installation Requires at least OSX 10.10 (Yosemite). Install the homebrew package manager if you don't already have it. Install Enclave brew install enclave You will likely be prompted to provide local credentials. Once installed, enrol your system with your Enclave Organisation sudo enclave enrol You will be asked for a valid Enrolment Key from your Portal account. Enclave stores the generated private keys for your local Enclave identity in a way that prevents easy access without local admin privileges, which is why this command runs under sudo. Depending on the type of enrolment key you used to enrol your new system, it might be held waiting for an Administrator to provide enrolment approval in your account Portal . Log in to authorise the enrolment of your new system if you need to, and configure additional options like DNS. You're all set! You've successfully enrolled a new system to your Enclave account. Starting and stopping Enclave The installer creates a lightweight supervisor service set to run at system start which is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as daemon child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric. Updating Enclave You can run brew upgrade enclave to install the latest version of enclave; your existing enrolment will be preserved. Uninstalling Enclave To remove Enclave, you can run: brew uninstall enclave This will stop all Enclave processes, and remove the binaries from your system, but your Enclave configuration, private keys and log files will be left in-place. If you wish to fully clear Enclave from your system, run: brew uninstall enclave --zap This will remove all configuration, private keys and log files from your system along with the Enclave binaries. Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled.","title":"macOS"},{"location":"setup/macos/#macos","text":"","title":"macOS"},{"location":"setup/macos/#installation","text":"Requires at least OSX 10.10 (Yosemite). Install the homebrew package manager if you don't already have it. Install Enclave brew install enclave You will likely be prompted to provide local credentials. Once installed, enrol your system with your Enclave Organisation sudo enclave enrol You will be asked for a valid Enrolment Key from your Portal account. Enclave stores the generated private keys for your local Enclave identity in a way that prevents easy access without local admin privileges, which is why this command runs under sudo. Depending on the type of enrolment key you used to enrol your new system, it might be held waiting for an Administrator to provide enrolment approval in your account Portal . Log in to authorise the enrolment of your new system if you need to, and configure additional options like DNS. You're all set! You've successfully enrolled a new system to your Enclave account.","title":"Installation"},{"location":"setup/macos/#starting-and-stopping-enclave","text":"The installer creates a lightweight supervisor service set to run at system start which is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as daemon child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric.","title":"Starting and stopping Enclave"},{"location":"setup/macos/#updating-enclave","text":"You can run brew upgrade enclave to install the latest version of enclave; your existing enrolment will be preserved.","title":"Updating Enclave"},{"location":"setup/macos/#uninstalling-enclave","text":"To remove Enclave, you can run: brew uninstall enclave This will stop all Enclave processes, and remove the binaries from your system, but your Enclave configuration, private keys and log files will be left in-place. If you wish to fully clear Enclave from your system, run: brew uninstall enclave --zap This will remove all configuration, private keys and log files from your system along with the Enclave binaries. Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled.","title":"Uninstalling Enclave"},{"location":"setup/nas/","text":"Network attached storage Installation Synology NAS We have beta support for Synology NAS drives (running on DSM 7.0 or later) via docker. Please follow our guide to installing Enclave on your Synology NAS drive . What to do if the install fails For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages. If your installation fails and you are unable to resolve the problem by retrying, please contact support@enclave.io .","title":"Network attached storage"},{"location":"setup/nas/#network-attached-storage","text":"","title":"Network attached storage"},{"location":"setup/nas/#installation","text":"Synology NAS We have beta support for Synology NAS drives (running on DSM 7.0 or later) via docker. Please follow our guide to installing Enclave on your Synology NAS drive .","title":"Installation"},{"location":"setup/nas/#what-to-do-if-the-install-fails","text":"For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages. If your installation fails and you are unable to resolve the problem by retrying, please contact support@enclave.io .","title":"What to do if the install fails"},{"location":"setup/ubuntu/","text":"Ubuntu / Debian Installation This guide applies to Ubuntu 14.04 LTS, 16.04 LTS, 18.04 LTS, 18.10, 19.10 and 20.04 LTS. Packages are available for x86, x64 and ARM architectures. Install the apt-transport-https plugin sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.list sudo apt-get update Install Enclave. sudo apt-get install enclave You will need provide a valid Enrolment Key from your account to complete the installation. Congratulations! You've successfully enrolled a new system to your Enclave account. Starting and stopping Enclave The installer creates a lightweight supervisor service set to run at system start which is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as daemon child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric. Updating Enclave Uninstalling Enclave TODO apt-get remove and apt-get purge Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled.","title":"Ubuntu / Debian"},{"location":"setup/ubuntu/#ubuntu-debian","text":"","title":"Ubuntu / Debian"},{"location":"setup/ubuntu/#installation","text":"This guide applies to Ubuntu 14.04 LTS, 16.04 LTS, 18.04 LTS, 18.10, 19.10 and 20.04 LTS. Packages are available for x86, x64 and ARM architectures. Install the apt-transport-https plugin sudo apt-get install apt-transport-https Add Enclave\u2019s package signing key and repository to apt sources curl -fsSL https://packages.enclave.io/apt/enclave.stable.gpg | sudo apt-key add - curl -fsSL https://packages.enclave.io/apt/enclave.stable.list | sudo tee /etc/apt/sources.list.d/enclave.list sudo apt-get update Install Enclave. sudo apt-get install enclave You will need provide a valid Enrolment Key from your account to complete the installation. Congratulations! You've successfully enrolled a new system to your Enclave account.","title":"Installation"},{"location":"setup/ubuntu/#starting-and-stopping-enclave","text":"The installer creates a lightweight supervisor service set to run at system start which is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as daemon child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric.","title":"Starting and stopping Enclave"},{"location":"setup/ubuntu/#updating-enclave","text":"","title":"Updating Enclave"},{"location":"setup/ubuntu/#uninstalling-enclave","text":"TODO apt-get remove and apt-get purge Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled.","title":"Uninstalling Enclave"},{"location":"setup/windows/","text":"Windows Installation This guide applies to Windows 7, 8 and 10 and Windows Server 2012, 2016 and 2019 (all editions). Packages are available for the x64 architecture. Download and run the latest Windows installer Download Enclave for Windows Package checksum ( loading ... ) ---------------------------------------------------------------- Run the installer. Administrator privileges are required, but the installer will prompt for privilege elevation if necessary. You will need to provide a valid Enrolment Key from your Portal account to complete installation. Once installed, Enclave will start and add a new tray icon to your system tray. If the Enclave tray icon is not visible, click the up arrow to find it in the hidden system tray overflow area. Right click on the tray icon when you need to open Enclave. Depending on the type of enrolment key you used to enrol your new system, it might be held waiting for an Administrator to provide enrolment approval in your account Portal . Log in to authorise the enrolment of your new system if you need to and configure additional options like DNS. You're all set! You've successfully enrolled a new system to your Enclave account. Unattended installation The Enclave Windows installer supports unattended installations for larger deployments. Run enclave_setup.exe with the /enrol XXXXX-XXXXX-XXXXX-XXXXX-XXXXX option to install and enrol Enclave without end-user interaction (don't forget to provide a valid enrolment key). Alternatively, to perform an unattended roll-out of Enclave without supplying an enrolment key simply use in the /unattended option. End-users will be able to provide an enrolment key at a later date. With an Enrolment Key Perform an unattended installation of Enclave and enrol as part of the installation. C:\\> enclave_setup.exe /enrol XXXXX-XXXXX-XXXXX-XXXXX-XXXXX Without an Enrolment Key Perform an unattended installation of Enclave without supplying an enrolment key. C:\\> enclave_setup.exe /unattended Starting and stopping Enclave The Windows installer creates a lightweight supervisor service (named Enclave in the Services MMC snap-in) which automatically runs at system start and is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric. Updating Enclave The Windows Tray application will prompt users when an updated version of Enclave is available. Following the click here to upgrade link in the yellow bar will terminate any Enclave connections temporarily while the setup installs the latest version. Enclave should be upgraded in-place and will automatically and re-establish connectivity to peers following an update. Updating Enclave to a new version should not interrupt connectivity for more than 1 minute in total, in most cases an upgrade takes less than 30 seconds before connectivity is restored. Uninstalling Enclave Enclave can be removed from a system using the Windows Control Panel. Open either Programs and Features or Apps and Features . Select Enclave to remove / uninstall. During uninstallation Enclave will ask if you want to Remove network fabric configuration and private keys? Answering yes will empty the following directory: C:\\Program Files\\Enclave Networks\\Enclave\\Agent\\profiles\\ Users should remove configuration and private keys when uninstalling if they are not planning to use Enclave again on a that particular system, or want to forcibly deregister. Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled. What to do if the install fails If an install goes horribly wrong, remove Enclave using the uninstaller and try again. If you're still encountering problems, examine the log files in C:\\Program Files\\Enclave Networks\\Enclave\\Agent\\logs . If an install is interrupted use the Enclave setup file to restart the process. For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages. If your installation fails and you are unable to resolve the problem, please contact support@enclave.io . fetch(\"https://install.enclave.io/manifest/windows/setup.json\", { method: 'get' }) .then(response => response.json()) .then(jsonResult => { var latest = jsonResult.ReleaseVersions.reverse().find(releaseVersion => { return releaseVersion.ReleaseType === 'GA'; }); var url = latest?.Packages[0].Url; var hash = latest?.Packages[0].Hash; var hashAlg = latest?.Packages[0].HashAlg; document.getElementById(\"download-windows-setup\").href = url; document.getElementById(\"setup-url\").innerHTML = url; document.getElementById(\"hash-alg\").innerHTML = hashAlg.toLowerCase(); document.getElementById(\"checksum\").innerHTML = base64ToHex(hash); }) .catch(err => { console.log(err); document.getElementById(\"download-windows-setup\").href = \"https://portal.enclave.io/my/new-system\"; }); function base64ToHex(str) { const raw = atob(str); let result = ''; for (let i = 0; i < raw.length; i++) { const hex = raw.charCodeAt(i).toString(16); result += (hex.length === 2 ? hex : '0' + hex); } return result; }","title":"Windows"},{"location":"setup/windows/#windows","text":"","title":"Windows"},{"location":"setup/windows/#installation","text":"This guide applies to Windows 7, 8 and 10 and Windows Server 2012, 2016 and 2019 (all editions). Packages are available for the x64 architecture. Download and run the latest Windows installer Download Enclave for Windows Package checksum ( loading ... ) ---------------------------------------------------------------- Run the installer. Administrator privileges are required, but the installer will prompt for privilege elevation if necessary. You will need to provide a valid Enrolment Key from your Portal account to complete installation. Once installed, Enclave will start and add a new tray icon to your system tray. If the Enclave tray icon is not visible, click the up arrow to find it in the hidden system tray overflow area. Right click on the tray icon when you need to open Enclave. Depending on the type of enrolment key you used to enrol your new system, it might be held waiting for an Administrator to provide enrolment approval in your account Portal . Log in to authorise the enrolment of your new system if you need to and configure additional options like DNS. You're all set! You've successfully enrolled a new system to your Enclave account.","title":"Installation"},{"location":"setup/windows/#unattended-installation","text":"The Enclave Windows installer supports unattended installations for larger deployments. Run enclave_setup.exe with the /enrol XXXXX-XXXXX-XXXXX-XXXXX-XXXXX option to install and enrol Enclave without end-user interaction (don't forget to provide a valid enrolment key). Alternatively, to perform an unattended roll-out of Enclave without supplying an enrolment key simply use in the /unattended option. End-users will be able to provide an enrolment key at a later date. With an Enrolment Key Perform an unattended installation of Enclave and enrol as part of the installation. C:\\> enclave_setup.exe /enrol XXXXX-XXXXX-XXXXX-XXXXX-XXXXX Without an Enrolment Key Perform an unattended installation of Enclave without supplying an enrolment key. C:\\> enclave_setup.exe /unattended","title":"Unattended installation"},{"location":"setup/windows/#starting-and-stopping-enclave","text":"The Windows installer creates a lightweight supervisor service (named Enclave in the Services MMC snap-in) which automatically runs at system start and is responsible for starting the Enclave fabric. The supervisor service exists to start, stop and restart Enclave fabric in the background as child processes. The supervisor service responds to the Enclave CLI verbs start and stop to control the Fabric.","title":"Starting and stopping Enclave"},{"location":"setup/windows/#updating-enclave","text":"The Windows Tray application will prompt users when an updated version of Enclave is available. Following the click here to upgrade link in the yellow bar will terminate any Enclave connections temporarily while the setup installs the latest version. Enclave should be upgraded in-place and will automatically and re-establish connectivity to peers following an update. Updating Enclave to a new version should not interrupt connectivity for more than 1 minute in total, in most cases an upgrade takes less than 30 seconds before connectivity is restored.","title":"Updating Enclave"},{"location":"setup/windows/#uninstalling-enclave","text":"Enclave can be removed from a system using the Windows Control Panel. Open either Programs and Features or Apps and Features . Select Enclave to remove / uninstall. During uninstallation Enclave will ask if you want to Remove network fabric configuration and private keys? Answering yes will empty the following directory: C:\\Program Files\\Enclave Networks\\Enclave\\Agent\\profiles\\ Users should remove configuration and private keys when uninstalling if they are not planning to use Enclave again on a that particular system, or want to forcibly deregister. Note: Enclave does not backup a system's private keys. Lost or deleted private keys are not recoverable. If a system's configuration and private keys are lost, to use that system with Enclave again it must be re-enrolled.","title":"Uninstalling Enclave"},{"location":"setup/windows/#what-to-do-if-the-install-fails","text":"If an install goes horribly wrong, remove Enclave using the uninstaller and try again. If you're still encountering problems, examine the log files in C:\\Program Files\\Enclave Networks\\Enclave\\Agent\\logs . If an install is interrupted use the Enclave setup file to restart the process. For troubleshooting and errors, use the site search or visit our troubleshooting section to look for information about common error messages. If your installation fails and you are unable to resolve the problem, please contact support@enclave.io . fetch(\"https://install.enclave.io/manifest/windows/setup.json\", { method: 'get' }) .then(response => response.json()) .then(jsonResult => { var latest = jsonResult.ReleaseVersions.reverse().find(releaseVersion => { return releaseVersion.ReleaseType === 'GA'; }); var url = latest?.Packages[0].Url; var hash = latest?.Packages[0].Hash; var hashAlg = latest?.Packages[0].HashAlg; document.getElementById(\"download-windows-setup\").href = url; document.getElementById(\"setup-url\").innerHTML = url; document.getElementById(\"hash-alg\").innerHTML = hashAlg.toLowerCase(); document.getElementById(\"checksum\").innerHTML = base64ToHex(hash); }) .catch(err => { console.log(err); document.getElementById(\"download-windows-setup\").href = \"https://portal.enclave.io/my/new-system\"; }); function base64ToHex(str) { const raw = atob(str); let result = ''; for (let i = 0; i < raw.length; i++) { const hex = raw.charCodeAt(i).toString(16); result += (hex.length === 2 ? hex : '0' + hex); } return result; }","title":"What to do if the install fails"},{"location":"support/account/","text":"Account ownership, transfer and closure","title":"Account ownership, transfer and closure"},{"location":"support/account/#account-ownership-transfer-and-closure","text":"","title":"Account ownership, transfer and closure"},{"location":"support/billing/","text":"Billing frequently asked questions","title":"Billing frequently asked questions"},{"location":"support/billing/#billing-frequently-asked-questions","text":"","title":"Billing frequently asked questions"},{"location":"support/contact/","text":"How to contact us Support request Ask a question or raise a support request. Forum or email. Share product feedback Share feedback with us (twitter / email) or questions about roadmap (support@enclave.io) How to report a security issue We want to keep Enclave safe for everyone. If you've discovered a security vulnerability in Enclave, we appreciate your help in disclosing it to us in a responsible manner. Please email us at security@enclave.io .","title":"How to contact us"},{"location":"support/contact/#how-to-contact-us","text":"","title":"How to contact us"},{"location":"support/contact/#support-request","text":"Ask a question or raise a support request. Forum or email.","title":"Support request"},{"location":"support/contact/#share-product-feedback","text":"Share feedback with us (twitter / email) or questions about roadmap (support@enclave.io)","title":"Share product feedback"},{"location":"support/contact/#how-to-report-a-security-issue","text":"We want to keep Enclave safe for everyone. If you've discovered a security vulnerability in Enclave, we appreciate your help in disclosing it to us in a responsible manner. Please email us at security@enclave.io .","title":"How to report a security issue"},{"location":"troubleshooting/","text":"Documentation / Troubleshooting Troubleshooting Enclave is running but the API service is not responding KB937056: Static IP addresses in Windows do not save Can\u2019t find what you\u2019re looking for? We\u2019re happy to help. Contact our team .","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"Enclave is running but the API service is not responding KB937056: Static IP addresses in Windows do not save","title":"Troubleshooting"},{"location":"troubleshooting/#cant-find-what-youre-looking-for","text":"We\u2019re happy to help. Contact our team .","title":"Can\u2019t find what you\u2019re looking for?"},{"location":"troubleshooting/enclave-is-running-but-the-api-service-is-not-responding/","text":"Documentation / Troubleshooting Enclave is running but the API service is not responding In certain circumstances on Windows computers Enclave may continue to provide network connectivity to peers, but the user interface may report that the API service is not responding, preventing local administration. Symptoms The Windows Tray application may report \"Enclave is running but the API service is not responding\" Cause Microsoft has confirmed that this is a problem with dotnet core and has issued a fix tracked in this GitHub issue Single file: Guard against partial clean-up of extracted files #3778 . A fix is scheduled to be released as part of the servicing release in April 2020. Resolution This issue has been fixed in the latest version of Enclave. Customers still running Enclave version 2020.4.20.0 should apply the following workaround: Open an administrator command prompt Run sc stop \"Enclave Fabric Supervisor\" Delete the contents of C:\\Windows\\Temp\\.net\\enclave In the Enclave Tray application use the \"Request Start\" button to start Enclave again Notes This is not a problem caused by Enclave, but a bug in dotnet core. Some customers may encounter this bug during routine use of the product, which may also interfere an administrator's ability to use Enclave effectively. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Enclave is running but the api service is not responding"},{"location":"troubleshooting/enclave-is-running-but-the-api-service-is-not-responding/#enclave-is-running-but-the-api-service-is-not-responding","text":"In certain circumstances on Windows computers Enclave may continue to provide network connectivity to peers, but the user interface may report that the API service is not responding, preventing local administration.","title":"Enclave is running but the API service is not responding"},{"location":"troubleshooting/enclave-is-running-but-the-api-service-is-not-responding/#symptoms","text":"The Windows Tray application may report \"Enclave is running but the API service is not responding\"","title":"Symptoms"},{"location":"troubleshooting/enclave-is-running-but-the-api-service-is-not-responding/#cause","text":"Microsoft has confirmed that this is a problem with dotnet core and has issued a fix tracked in this GitHub issue Single file: Guard against partial clean-up of extracted files #3778 . A fix is scheduled to be released as part of the servicing release in April 2020.","title":"Cause"},{"location":"troubleshooting/enclave-is-running-but-the-api-service-is-not-responding/#resolution","text":"This issue has been fixed in the latest version of Enclave. Customers still running Enclave version 2020.4.20.0 should apply the following workaround: Open an administrator command prompt Run sc stop \"Enclave Fabric Supervisor\" Delete the contents of C:\\Windows\\Temp\\.net\\enclave In the Enclave Tray application use the \"Request Start\" button to start Enclave again","title":"Resolution"},{"location":"troubleshooting/enclave-is-running-but-the-api-service-is-not-responding/#notes","text":"This is not a problem caused by Enclave, but a bug in dotnet core. Some customers may encounter this bug during routine use of the product, which may also interfere an administrator's ability to use Enclave effectively. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Notes"},{"location":"troubleshooting/static-ip-addresses-in-windows-do-not-save/","text":"Documentation / Troubleshooting KB937056: Static IP addresses in Windows do not save In some versions of Microsoft Windows, you may manually configure the TCP/IP properties dialog to add a static IP address. After closing and re-opening the dialog, the Internet Protocol (TCP/IP) Properties dialog box still displays the default settings. Additionally, the \"Obtain IP address automatically\" option is selected. However, when you type ipconfig /all at a command prompt, the static IP address information that you entered manually is displayed. Symptoms In Windows, the Internet Protocol (TCP/IP) Properties dialog box displays the default IP address settings after you manually configure a static IP address creating the impression that static IP addresses information was not saved or remembered by Windows. Cause Microsoft has confirmed that this is a problem in some versions of Microsoft Windows. See KB937056 Resolution Follow the remediation steps described in KB937056 to remove the HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Network registry key. For reference, on Page 575 of \"Windows 2000 Server 24seven\" by Matthew Strebe (ISBN 978-0782126693) the author describes the registry object ...\\Control\\Network\\* and its subkeys as a store which \"contains keys that create the bindings between network adapters, clients, services and transport protocols\". Notes This is not a problem caused by Enclave, but a bug in Microsoft Windows. Some customers may encounter this bug during routine use of the product, which may also interfere an administrators ability to use Enclave effectively. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Static ip addresses in windows do not save"},{"location":"troubleshooting/static-ip-addresses-in-windows-do-not-save/#kb937056-static-ip-addresses-in-windows-do-not-save","text":"In some versions of Microsoft Windows, you may manually configure the TCP/IP properties dialog to add a static IP address. After closing and re-opening the dialog, the Internet Protocol (TCP/IP) Properties dialog box still displays the default settings. Additionally, the \"Obtain IP address automatically\" option is selected. However, when you type ipconfig /all at a command prompt, the static IP address information that you entered manually is displayed.","title":"KB937056: Static IP addresses in Windows do not save"},{"location":"troubleshooting/static-ip-addresses-in-windows-do-not-save/#symptoms","text":"In Windows, the Internet Protocol (TCP/IP) Properties dialog box displays the default IP address settings after you manually configure a static IP address creating the impression that static IP addresses information was not saved or remembered by Windows.","title":"Symptoms"},{"location":"troubleshooting/static-ip-addresses-in-windows-do-not-save/#cause","text":"Microsoft has confirmed that this is a problem in some versions of Microsoft Windows. See KB937056","title":"Cause"},{"location":"troubleshooting/static-ip-addresses-in-windows-do-not-save/#resolution","text":"Follow the remediation steps described in KB937056 to remove the HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Network registry key. For reference, on Page 575 of \"Windows 2000 Server 24seven\" by Matthew Strebe (ISBN 978-0782126693) the author describes the registry object ...\\Control\\Network\\* and its subkeys as a store which \"contains keys that create the bindings between network adapters, clients, services and transport protocols\".","title":"Resolution"},{"location":"troubleshooting/static-ip-addresses-in-windows-do-not-save/#notes","text":"This is not a problem caused by Enclave, but a bug in Microsoft Windows. Some customers may encounter this bug during routine use of the product, which may also interfere an administrators ability to use Enclave effectively. Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Notes"},{"location":"tutorials/","text":"Documentation / Tutorials Tutorials and Guides Connectivity experiments using Enclave and Docker How to securely access your Synology NAS drive with Enclave How to run Enclave inside a Docker container Setting up Enclave on a Raspberry Pi Can\u2019t find what you\u2019re looking for? We\u2019re happy to help. Contact our team .","title":"Tutorials"},{"location":"tutorials/#tutorials-and-guides","text":"Connectivity experiments using Enclave and Docker How to securely access your Synology NAS drive with Enclave How to run Enclave inside a Docker container Setting up Enclave on a Raspberry Pi","title":"Tutorials and Guides"},{"location":"tutorials/#cant-find-what-youre-looking-for","text":"We\u2019re happy to help. Contact our team .","title":"Can\u2019t find what you\u2019re looking for?"},{"location":"tutorials/docker-experiments/","text":"Documentation / Tutorials Connectivity experiments using Enclave and Docker This page contains a growing collection of non-production Docker scripts for various containerised applications that can be spun up quickly and accessed securely using Enclave for experiments and proof of concept projects. The Docker scripts on this page are intended to showcase and demonstrate how Enclave can interact with many different types of application for proof of concept projects. These Docker scripts are not fit for use in production environments. Working with Docker Install Docker $ sudo apt-get update $ sudo apt-get install docker.io docker-compose -y Controlling Docker Containers List running Docker containers $ sudo docker ps Secure Network File Server This script prepares and runs a Docker container which builds a secure SAMBA file server with anonymous read/write permissions to a /share directory on the host operating system. Install Enclave into the container to add secure remote access to the network share. $ sudo mkdir /share $ sudo chmod -R 777 /share/ $ sudo docker run -p 139 :139 -p 445 :445 -p 137 :137/udp -p 138 :138/udp -v /share:/share -d sixeyed/samba -s \"share;/share;yes;no;yes;all\" Self-hosted Slack alternative This script and runs a Docker container that deploys an instance of Mattermost: an open source and self-hosted alternative to Slack. Install Enclave into the container to add secure remote access your new open source messaging platform. $ sudo docker run --name mattermost-preview -d --publish 80 :8065 mattermost/mattermost-preview Once the Mattermost container is running and Enclave is installed, access the Mattermost webserver in your browser using either the Enclave hostname or Enclave IP address assigned to the container. Allow other parties with access to this container (either directly through the local network interface, or remotely via Enclave) to self-register for an account on this Mattermost instance. Navigate to System Console > Signup > Enable Open Server . Create a new team on your Mattermost instance and allow any user with an account to join this team Team Settings > Allow any user with an account on this server to join this team > Select Yes . Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Docker experiments"},{"location":"tutorials/docker-experiments/#connectivity-experiments-using-enclave-and-docker","text":"This page contains a growing collection of non-production Docker scripts for various containerised applications that can be spun up quickly and accessed securely using Enclave for experiments and proof of concept projects. The Docker scripts on this page are intended to showcase and demonstrate how Enclave can interact with many different types of application for proof of concept projects. These Docker scripts are not fit for use in production environments.","title":"Connectivity experiments using Enclave and Docker"},{"location":"tutorials/docker-experiments/#working-with-docker","text":"","title":"Working with Docker"},{"location":"tutorials/docker-experiments/#install-docker","text":"$ sudo apt-get update $ sudo apt-get install docker.io docker-compose -y","title":"Install Docker"},{"location":"tutorials/docker-experiments/#controlling-docker-containers","text":"List running Docker containers $ sudo docker ps","title":"Controlling Docker Containers"},{"location":"tutorials/docker-experiments/#secure-network-file-server","text":"This script prepares and runs a Docker container which builds a secure SAMBA file server with anonymous read/write permissions to a /share directory on the host operating system. Install Enclave into the container to add secure remote access to the network share. $ sudo mkdir /share $ sudo chmod -R 777 /share/ $ sudo docker run -p 139 :139 -p 445 :445 -p 137 :137/udp -p 138 :138/udp -v /share:/share -d sixeyed/samba -s \"share;/share;yes;no;yes;all\"","title":"Secure Network File Server"},{"location":"tutorials/docker-experiments/#self-hosted-slack-alternative","text":"This script and runs a Docker container that deploys an instance of Mattermost: an open source and self-hosted alternative to Slack. Install Enclave into the container to add secure remote access your new open source messaging platform. $ sudo docker run --name mattermost-preview -d --publish 80 :8065 mattermost/mattermost-preview Once the Mattermost container is running and Enclave is installed, access the Mattermost webserver in your browser using either the Enclave hostname or Enclave IP address assigned to the container. Allow other parties with access to this container (either directly through the local network interface, or remotely via Enclave) to self-register for an account on this Mattermost instance. Navigate to System Console > Signup > Enable Open Server . Create a new team on your Mattermost instance and allow any user with an account to join this team Team Settings > Allow any user with an account on this server to join this team > Select Yes . Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Self-hosted Slack alternative"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/","text":"Documentation / Tutorials How to securely access your Synology NAS drive with Enclave Last Updated: January 20, 2021 Synology are market leaders in network attached storage devices, perfect for home or small business use. Enclave helps you easily build safe, secure and private network connectivity without the hassle of configuring firewalls and VPNs, or needing to manage IP addresses, subnets, ACLs, NAT, routing tables, certificates and secret keys. In this article we will show you how to easily provide private remote access to your Synology NAS drive without needing to open ports or setup a VPN server, darkening your network to third parties by installing Enclave. Before you begin, you will need: An Enclave account (Register here , for free) A Synology NAS drive running at least DSM 7.0 (currently in Beta) Administrative access to your Synology NAS drive When setup, Enclave will be running inside a Docker container on your Synology NAS drive. At the time of writing, Docker can only be installed on devices from the Synology Plus Series product line (not the Value Series) so please check to see if your system is a supported model . The Synology NAS allows administrators to fully own their devices, enabling SSH and dropping into a root bash prompt on the DSM software, Synology's Linux-based operating system. Okay, lets get started. If you have opened administrative access ports on your Synology NAS drive to the public Internet (default ports are 5000, 5001 and 22 for SSH) you should re-consider if they really need to be open and close those ports if not. They are the default HTTP and HTTPS web server ports for Synology DSM and allow access to the administration console. 1. Enable SSH access to your Synology NAS drive For Enclave to create a virtual network interface, we'll need to ensure that the tun kernel module is installed and enabled on the device. We do this by enabling and connecting into the device via SSH. Open the Control Panel , navigate to Terminal & SNMP and enable the SSH service. 2. Install the TUN kernel module With SSH enabled, log into your NAS using the admin account and check to see if the tun kernel module is installed and enabled. $ lsmod | grep -w tun If lsmod returns no results, you'll need to use insmod to install it. $ sudo insmod /lib/modules/tun.ko Now check lsmod again, you should see tun module is now loaded: tun 19133 0 We don't need SSH access any more, if you're not going to use it again please go back and disable the SSH service in the DSM Control Panel. This was not a permanent change, the module will be unloaded the next time the system reboots, so lets create a script which can be scheduled to run on start-up which will re-install tun.ko at boot. Switch to root $ sudo su - Create the following script on your Synology file system by typing vim /volume1/enable-tun.sh #!/bin/sh if ( [ ! -c /dev/net/tun ] ); then if ( [ ! -d /dev/net ] ); then mkdir -m 755 /dev/net fi mknod /dev/net/tun c 10 200 fi if ( !(lsmod | grep -q \"^tun\\s\") ); then insmod /lib/modules/tun.ko fi Save the file with [escape] followed by the keys :wq! Mark the file as executable chmod +x /volume1/enable-tun.sh Now create a scheduled task to run this script on start-up: Log in to your Synology NAS drive web interface, go to Control Panel > Task Scheduler and create a new User-defined script as a Triggered Task . Name the task Enable TUN , set the user to be root and the event as Boot-up . Then, in the Task Settings tab enter bash /volume1/enable-tun.sh as the User-defined script and hit OK. To test if the script works, after restarting your NAS log back into SSH and run lsmod | grep -w tun to check that the TUN module was successfully re-loaded. 3. Install Docker The easiest way to install Docker on your Synology NAS drive is via the DSM package manager. Navigate to the Package Center and install Docker. 4. Download Enclave from the Docker Registry Using the search box on the Registry tab of the Docker package, search for enclave and download the enclavenetworks/enclave image from the container registry. The Enclave Docker image hosted on Docker hub . 5. Launch an Enclave container Once the Enclave image is downloaded, the Launch button (shown below) in the Image tab will become available, click this. Now we are ready to setup the Enclave container. First, give the container a name, we've used enclave . Also need to be sure to check Execute container using high privilege , this causes DSM to pass the --privileged to Docker, which effectively enables the container to request --cap-add NET_ADMIN (Perform various network-related operations) and --device /dev/net/tun (Allows devices to run inside the container). Before clicking Next , open the Advanced Settings dialog. Under the Advanced Settings tab Select Enable auto-restart Under the Volume tab Select Add Folder . Create a mount path to /etc/enclave/profiles in the docker directory on your DiskStation. This is where Enclave will write its configuration file, private keys, and certificates to persist between reboots. Under the Network tab Select the checkbox to Use the same network as Docker host . This will allow you to access the Synology NAS drive via the Enclave network. Under the Environment tab Define a new Environment Variable called ENCLAVE_ENROLMENT_KEY and set its value to a valid (and enabled) enrolment key from your Enclave account. Be careful not to include whitespace! This Enrolment key is only used the first time Enclave runs. When Enclave has successfully started once and written a profile to disk, it is safe to remove this environment variable. Enrolment keys are available from the Enclave Portal and determine which systems can register to your Enclave account, so we recommend that you keep them secret . Leave the Execution Command set to the default value of run and click Apply. Congratulations! You've finished configuring your container, click Done to Launch. 6. Connect to the NAS with Enclave Your Enclave container is starting up and will enrol to your account, within 1 or 2 seconds your Enclave container will be happily humming away in the background. Let's create a connection to another system running Enclave. From the Docker package, go to the Container tab, select the Enclave container you've just created and open the container Details pane. Here you can see CPU usage, RAM usage, container uptime and other information. Move to the Terminal tab and click on the Create button to drop into a bash shell inside the container, from here you can work with and manipulate Enclave as normal using the CLI. First, use the status verb to check on the Enclave process and view your container's Local Identity. The container will also be visible as a newly connected system in the Enclave Portal . # enclave status Now you know the Local Identity of your container, you can authorise other systems to talk to your container by adding their identities, and visa versa. # enclave add 4Y68W -d \"Build server\" # enclave add R89XQ -d \"Windows 10 laptop\" # enclave add K5W2Q -d \"Jane's macbook\" For more information about how to use the CLI, or to learn more about Identities and how Enclave builds connections, please see our documentation . Now you've added some connections, be sure to check the DNS forwarding is enabled on any peers which you're connected to so they can access your Synology NAS drive using a friendly DNS hostname like diskstation.enclave . Welcome to your own personal (dark) Internet! Supported Models This tutorial requires Docker to be installed on your Synology NAS drive which, at the time of writing, only runs on Synology NAS drives from the Plus Series product line (not the Value Series). Please see the Docker package for an up to date list of supported models. Series Supported Models 21 series RS1221RP+ , RS1221+ , DS1821+ , DS1621xs+ , DS1621+ , DVA3221 20 series FS6400 , FS3600 , FS3400 , RS820RP+ , RS820+ , DS920+ , DS720+ , DS620slim , DS420+ , DS220+ , DS1520+ , SA3600 , SA3400 , SA3200D 19 series RS1619xs+ , RS1219+ , DS2419+ , DS1819+ , DS1019+ , DVA3219 18 series FS1018 , RS3618xs , RS818RP+ , RS818+ , RS2818RP+ , RS2418RP+ , RS2418+ , DS3018xs , DS918+ , DS718+ , DS218+ , DS1618+ 17 series FS3017 , FS2017 , RS3617RPxs , RS3617xs , RS4017xs+ , RS3617xs+ , RS18017xs+ , DS3617xs , DS1817+ , DS1517+ 16 series RS2416RP+ , RS2416+ , RS18016xs+ , DS916+ , DS716+II , DS716+ , DS216+II , DS216+ 15 series RS815RP+ , RS815+ , RC18015xs+ , DS3615xs , DS415+ , DS2415+ , DS1815+ , DS1515+ 14 series RS3614RPxs , RS3614xs , RS814RP+ , RS814+ , RS3614xs+ , RS2414RP+ , RS2414+ 13 series RS3413xs+ , RS10613xs+ , DS713+ , DS2413+ , DS1813+ , DS1513+ 12 series RS3412RPxs , RS3412xs , RS812RP+ , RS812+ , RS2212RP+ , RS2212+ , DS3612xs , DS712+ , DS412+ , DS1812+ , DS1512+ 11 series RS3411RPxs , RS3411xs , RS2211RP+ , RS2211+ , DS3611xs , DS411+II , DS411+ , DS2411+ , DS1511+ Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"How to securely access your synology nas drive with enclave"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#how-to-securely-access-your-synology-nas-drive-with-enclave","text":"Last Updated: January 20, 2021 Synology are market leaders in network attached storage devices, perfect for home or small business use. Enclave helps you easily build safe, secure and private network connectivity without the hassle of configuring firewalls and VPNs, or needing to manage IP addresses, subnets, ACLs, NAT, routing tables, certificates and secret keys. In this article we will show you how to easily provide private remote access to your Synology NAS drive without needing to open ports or setup a VPN server, darkening your network to third parties by installing Enclave. Before you begin, you will need: An Enclave account (Register here , for free) A Synology NAS drive running at least DSM 7.0 (currently in Beta) Administrative access to your Synology NAS drive When setup, Enclave will be running inside a Docker container on your Synology NAS drive. At the time of writing, Docker can only be installed on devices from the Synology Plus Series product line (not the Value Series) so please check to see if your system is a supported model . The Synology NAS allows administrators to fully own their devices, enabling SSH and dropping into a root bash prompt on the DSM software, Synology's Linux-based operating system. Okay, lets get started. If you have opened administrative access ports on your Synology NAS drive to the public Internet (default ports are 5000, 5001 and 22 for SSH) you should re-consider if they really need to be open and close those ports if not. They are the default HTTP and HTTPS web server ports for Synology DSM and allow access to the administration console.","title":"How to securely access your Synology NAS drive with Enclave"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#1-enable-ssh-access-to-your-synology-nas-drive","text":"For Enclave to create a virtual network interface, we'll need to ensure that the tun kernel module is installed and enabled on the device. We do this by enabling and connecting into the device via SSH. Open the Control Panel , navigate to Terminal & SNMP and enable the SSH service.","title":"1. Enable SSH access to your Synology NAS drive"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#2-install-the-tun-kernel-module","text":"With SSH enabled, log into your NAS using the admin account and check to see if the tun kernel module is installed and enabled. $ lsmod | grep -w tun If lsmod returns no results, you'll need to use insmod to install it. $ sudo insmod /lib/modules/tun.ko Now check lsmod again, you should see tun module is now loaded: tun 19133 0 We don't need SSH access any more, if you're not going to use it again please go back and disable the SSH service in the DSM Control Panel. This was not a permanent change, the module will be unloaded the next time the system reboots, so lets create a script which can be scheduled to run on start-up which will re-install tun.ko at boot. Switch to root $ sudo su - Create the following script on your Synology file system by typing vim /volume1/enable-tun.sh #!/bin/sh if ( [ ! -c /dev/net/tun ] ); then if ( [ ! -d /dev/net ] ); then mkdir -m 755 /dev/net fi mknod /dev/net/tun c 10 200 fi if ( !(lsmod | grep -q \"^tun\\s\") ); then insmod /lib/modules/tun.ko fi Save the file with [escape] followed by the keys :wq! Mark the file as executable chmod +x /volume1/enable-tun.sh Now create a scheduled task to run this script on start-up: Log in to your Synology NAS drive web interface, go to Control Panel > Task Scheduler and create a new User-defined script as a Triggered Task . Name the task Enable TUN , set the user to be root and the event as Boot-up . Then, in the Task Settings tab enter bash /volume1/enable-tun.sh as the User-defined script and hit OK. To test if the script works, after restarting your NAS log back into SSH and run lsmod | grep -w tun to check that the TUN module was successfully re-loaded.","title":"2. Install the TUN kernel module"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#3-install-docker","text":"The easiest way to install Docker on your Synology NAS drive is via the DSM package manager. Navigate to the Package Center and install Docker.","title":"3. Install Docker"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#4-download-enclave-from-the-docker-registry","text":"Using the search box on the Registry tab of the Docker package, search for enclave and download the enclavenetworks/enclave image from the container registry. The Enclave Docker image hosted on Docker hub .","title":"4. Download Enclave from the Docker Registry"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#5-launch-an-enclave-container","text":"Once the Enclave image is downloaded, the Launch button (shown below) in the Image tab will become available, click this. Now we are ready to setup the Enclave container. First, give the container a name, we've used enclave . Also need to be sure to check Execute container using high privilege , this causes DSM to pass the --privileged to Docker, which effectively enables the container to request --cap-add NET_ADMIN (Perform various network-related operations) and --device /dev/net/tun (Allows devices to run inside the container). Before clicking Next , open the Advanced Settings dialog. Under the Advanced Settings tab Select Enable auto-restart Under the Volume tab Select Add Folder . Create a mount path to /etc/enclave/profiles in the docker directory on your DiskStation. This is where Enclave will write its configuration file, private keys, and certificates to persist between reboots. Under the Network tab Select the checkbox to Use the same network as Docker host . This will allow you to access the Synology NAS drive via the Enclave network. Under the Environment tab Define a new Environment Variable called ENCLAVE_ENROLMENT_KEY and set its value to a valid (and enabled) enrolment key from your Enclave account. Be careful not to include whitespace! This Enrolment key is only used the first time Enclave runs. When Enclave has successfully started once and written a profile to disk, it is safe to remove this environment variable. Enrolment keys are available from the Enclave Portal and determine which systems can register to your Enclave account, so we recommend that you keep them secret . Leave the Execution Command set to the default value of run and click Apply. Congratulations! You've finished configuring your container, click Done to Launch.","title":"5. Launch an Enclave container"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#6-connect-to-the-nas-with-enclave","text":"Your Enclave container is starting up and will enrol to your account, within 1 or 2 seconds your Enclave container will be happily humming away in the background. Let's create a connection to another system running Enclave. From the Docker package, go to the Container tab, select the Enclave container you've just created and open the container Details pane. Here you can see CPU usage, RAM usage, container uptime and other information. Move to the Terminal tab and click on the Create button to drop into a bash shell inside the container, from here you can work with and manipulate Enclave as normal using the CLI. First, use the status verb to check on the Enclave process and view your container's Local Identity. The container will also be visible as a newly connected system in the Enclave Portal . # enclave status Now you know the Local Identity of your container, you can authorise other systems to talk to your container by adding their identities, and visa versa. # enclave add 4Y68W -d \"Build server\" # enclave add R89XQ -d \"Windows 10 laptop\" # enclave add K5W2Q -d \"Jane's macbook\" For more information about how to use the CLI, or to learn more about Identities and how Enclave builds connections, please see our documentation . Now you've added some connections, be sure to check the DNS forwarding is enabled on any peers which you're connected to so they can access your Synology NAS drive using a friendly DNS hostname like diskstation.enclave . Welcome to your own personal (dark) Internet!","title":"6. Connect to the NAS with Enclave"},{"location":"tutorials/how-to-securely-access-your-synology-nas-drive-with-enclave/#supported-models","text":"This tutorial requires Docker to be installed on your Synology NAS drive which, at the time of writing, only runs on Synology NAS drives from the Plus Series product line (not the Value Series). Please see the Docker package for an up to date list of supported models. Series Supported Models 21 series RS1221RP+ , RS1221+ , DS1821+ , DS1621xs+ , DS1621+ , DVA3221 20 series FS6400 , FS3600 , FS3400 , RS820RP+ , RS820+ , DS920+ , DS720+ , DS620slim , DS420+ , DS220+ , DS1520+ , SA3600 , SA3400 , SA3200D 19 series RS1619xs+ , RS1219+ , DS2419+ , DS1819+ , DS1019+ , DVA3219 18 series FS1018 , RS3618xs , RS818RP+ , RS818+ , RS2818RP+ , RS2418RP+ , RS2418+ , DS3018xs , DS918+ , DS718+ , DS218+ , DS1618+ 17 series FS3017 , FS2017 , RS3617RPxs , RS3617xs , RS4017xs+ , RS3617xs+ , RS18017xs+ , DS3617xs , DS1817+ , DS1517+ 16 series RS2416RP+ , RS2416+ , RS18016xs+ , DS916+ , DS716+II , DS716+ , DS216+II , DS216+ 15 series RS815RP+ , RS815+ , RC18015xs+ , DS3615xs , DS415+ , DS2415+ , DS1815+ , DS1515+ 14 series RS3614RPxs , RS3614xs , RS814RP+ , RS814+ , RS3614xs+ , RS2414RP+ , RS2414+ 13 series RS3413xs+ , RS10613xs+ , DS713+ , DS2413+ , DS1813+ , DS1513+ 12 series RS3412RPxs , RS3412xs , RS812RP+ , RS812+ , RS2212RP+ , RS2212+ , DS3612xs , DS712+ , DS412+ , DS1812+ , DS1512+ 11 series RS3411RPxs , RS3411xs , RS2211RP+ , RS2211+ , DS3611xs , DS411+II , DS411+ , DS2411+ , DS1511+ Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":" Supported Models"},{"location":"tutorials/running-enclave-on-docker/","text":"Documentation / Tutorials How to run Enclave inside a Docker container Note: This guide is written for Docker Community Edition 19.03.5. Install Docker To follow this guide, you will need to have Docker already installed on your local system. This guide is based on running Docker (version 19.03.5) on a fresh installation of Ubuntu 18.04 LTS. $ sudo apt update $ sudo apt install apt-transport-https ca-certificates curl software-properties-common -y $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - $ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" $ sudo apt update $ sudo apt install docker-ce -y Download and build the Docker image Obtain the latest docker file URL from the Portal , and with the Dockerfile downloaded, build the Docker image. $ sudo docker build --no-cache -t enclave . Run the container interactively Run the container interactively to license and start Enclave. Passing --privileged and --net=host arguments allows docker to present the tap0 interface created by Enclave inside the container out to the host operating system, without installing Enclave onto the host. $ sudo docker run -it --privileged --net=host enclave From within the container, license Enclave using a valid key provisioned in the Portal . # enclave license 00000-00000-00000-00000-00000 Next, start Enclave running as a background process, detached from the terminal and shielded from the HUP signal that warns dependent processes of logout by using nohup to run Enclave. This backgrounds Enclave and allows us to continue using the terminal. # nohup enclave start & Now Enclave is running in the background, detached from the terminal you can check the status of Enclave, and add peers as necessary. # enclave status # enclave add ABC -d \"another host running enclave\" Tip: To detach Docker from the tty of an interactive container without exiting the shell, use the escape sequence Ctrl-p + Ctrl-q . This will switch a container running in interactive mode into daemon mode and release the terminal back to the host operating system. While this container is running, your host operating system will be able to communicate with connected peers. Use this container to administer the Enclave network. Use tap0 on the host operating system Using ifconfig check to see if the tap0 interface is present on the host adapter, any applications on the host operating system will transparently be able to communicate with partners on the Enclave network. Use docker ps and docker attach to reconnect to the Enclave container and administer the network as required. $ ifconfig tap0: flags=67<UP,BROADCAST,RUNNING> mtu 2800 inet 100.90.154.224 netmask 255.192.0.0 broadcast 0.0.0.0 inet6 fe80::605f:16ff:fe90:20a8 prefixlen 64 scopeid 0x20<link> ether 62:5f:16:90:20:a8 txqueuelen 1000 (Ethernet) RX packets 98 bytes 17732 (17.7 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 18 bytes 1412 (1.4 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Running enclave on docker"},{"location":"tutorials/running-enclave-on-docker/#how-to-run-enclave-inside-a-docker-container","text":"Note: This guide is written for Docker Community Edition 19.03.5.","title":"How to run Enclave inside a Docker container"},{"location":"tutorials/running-enclave-on-docker/#install-docker","text":"To follow this guide, you will need to have Docker already installed on your local system. This guide is based on running Docker (version 19.03.5) on a fresh installation of Ubuntu 18.04 LTS. $ sudo apt update $ sudo apt install apt-transport-https ca-certificates curl software-properties-common -y $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - $ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" $ sudo apt update $ sudo apt install docker-ce -y","title":"Install Docker"},{"location":"tutorials/running-enclave-on-docker/#download-and-build-the-docker-image","text":"Obtain the latest docker file URL from the Portal , and with the Dockerfile downloaded, build the Docker image. $ sudo docker build --no-cache -t enclave .","title":"Download and build the Docker image"},{"location":"tutorials/running-enclave-on-docker/#run-the-container-interactively","text":"Run the container interactively to license and start Enclave. Passing --privileged and --net=host arguments allows docker to present the tap0 interface created by Enclave inside the container out to the host operating system, without installing Enclave onto the host. $ sudo docker run -it --privileged --net=host enclave From within the container, license Enclave using a valid key provisioned in the Portal . # enclave license 00000-00000-00000-00000-00000 Next, start Enclave running as a background process, detached from the terminal and shielded from the HUP signal that warns dependent processes of logout by using nohup to run Enclave. This backgrounds Enclave and allows us to continue using the terminal. # nohup enclave start & Now Enclave is running in the background, detached from the terminal you can check the status of Enclave, and add peers as necessary. # enclave status # enclave add ABC -d \"another host running enclave\" Tip: To detach Docker from the tty of an interactive container without exiting the shell, use the escape sequence Ctrl-p + Ctrl-q . This will switch a container running in interactive mode into daemon mode and release the terminal back to the host operating system. While this container is running, your host operating system will be able to communicate with connected peers. Use this container to administer the Enclave network.","title":"Run the container interactively"},{"location":"tutorials/running-enclave-on-docker/#use-tap0-on-the-host-operating-system","text":"Using ifconfig check to see if the tap0 interface is present on the host adapter, any applications on the host operating system will transparently be able to communicate with partners on the Enclave network. Use docker ps and docker attach to reconnect to the Enclave container and administer the network as required. $ ifconfig tap0: flags=67<UP,BROADCAST,RUNNING> mtu 2800 inet 100.90.154.224 netmask 255.192.0.0 broadcast 0.0.0.0 inet6 fe80::605f:16ff:fe90:20a8 prefixlen 64 scopeid 0x20<link> ether 62:5f:16:90:20:a8 txqueuelen 1000 (Ethernet) RX packets 98 bytes 17732 (17.7 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 18 bytes 1412 (1.4 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Use tap0 on the host operating system"},{"location":"tutorials/setting-up-enclave-on-a-raspberry-pi/","text":"Documentation / Tutorials Setting up Enclave on a Raspberry Pi Follow these steps to install Enclave on your Raspberry Pi running Raspbian 10 (x64): 1. Install Open the download page section of your account in the Enclave Portal and copy the download link to the setup script for your Raspberry Pi and run it on your device. 2. Enrol Open the Portal and provision a new enrolment key for your Raspberry Pi if you need to. Alternatively, if an existing enrolment is available, make note of the enrolment key and use that to enrol the device. Enrol the device. If you don't supply the enrolment key at the command line, Enclave will prompt you to enter the enrolment key. $ sudo enclave enrol 3. Start Start Enclave on the Raspberry Pi $ sudo systemctl start enclave 4. Connect Using Enclave Core, you must authorise a connection to other systems in order to build network connectivity. You will need to know the certificate name of each counterpart system. In this example I will connect the Raspberry Pi to my office workstation so I can view its Motion camera feed remotely. My workstation's certificate name is 72LVG and on the Raspberry Pi I will authorise Enclave to allow connections with my workstation using the add command. The -d argument is a description (or friendly name) of this connection for future reference. $ enclave add 72LVG -d \"connection to office workstation\" The workstation will need to mutually authorise the Raspberry Pi connection aswell, and so the workstation needs to know the certificate name of the Raspberry Pi. Run enclave status on the Raspberry Pi to find its local certificate name. 5. Verify You can find your Raspberry Pi's new Enclave IP address and connectivity to other peers by: Checking the Portal Running ifconfig tap0 Running enclave status Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"Setting up enclave on a raspberry pi"},{"location":"tutorials/setting-up-enclave-on-a-raspberry-pi/#setting-up-enclave-on-a-raspberry-pi","text":"Follow these steps to install Enclave on your Raspberry Pi running Raspbian 10 (x64):","title":"Setting up Enclave on a Raspberry Pi"},{"location":"tutorials/setting-up-enclave-on-a-raspberry-pi/#1-install","text":"Open the download page section of your account in the Enclave Portal and copy the download link to the setup script for your Raspberry Pi and run it on your device.","title":"1. Install"},{"location":"tutorials/setting-up-enclave-on-a-raspberry-pi/#2-enrol","text":"Open the Portal and provision a new enrolment key for your Raspberry Pi if you need to. Alternatively, if an existing enrolment is available, make note of the enrolment key and use that to enrol the device. Enrol the device. If you don't supply the enrolment key at the command line, Enclave will prompt you to enter the enrolment key. $ sudo enclave enrol","title":"2. Enrol"},{"location":"tutorials/setting-up-enclave-on-a-raspberry-pi/#3-start","text":"Start Enclave on the Raspberry Pi $ sudo systemctl start enclave","title":"3. Start"},{"location":"tutorials/setting-up-enclave-on-a-raspberry-pi/#4-connect","text":"Using Enclave Core, you must authorise a connection to other systems in order to build network connectivity. You will need to know the certificate name of each counterpart system. In this example I will connect the Raspberry Pi to my office workstation so I can view its Motion camera feed remotely. My workstation's certificate name is 72LVG and on the Raspberry Pi I will authorise Enclave to allow connections with my workstation using the add command. The -d argument is a description (or friendly name) of this connection for future reference. $ enclave add 72LVG -d \"connection to office workstation\" The workstation will need to mutually authorise the Raspberry Pi connection aswell, and so the workstation needs to know the certificate name of the Raspberry Pi. Run enclave status on the Raspberry Pi to find its local certificate name.","title":"4. Connect"},{"location":"tutorials/setting-up-enclave-on-a-raspberry-pi/#5-verify","text":"You can find your Raspberry Pi's new Enclave IP address and connectivity to other peers by: Checking the Portal Running ifconfig tap0 Running enclave status Having problems? Contact us at support@enclave.io or ask for help in our community support channels. Last updated Aug 19, 2021","title":"5. Verify"}]}